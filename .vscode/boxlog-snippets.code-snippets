{
  "BoxLog Button Primary": {
    "prefix": "bl-btn-primary",
    "body": [
      "<Button className=\"$1\">$2</Button>"
    ],
    "description": "BoxLog プライマリボタン"
  },
  "BoxLog Button Secondary": {
    "prefix": "bl-btn-secondary",
    "body": [
      "<Button variant=\"secondary\" className=\"$1\">$2</Button>"
    ],
    "description": "BoxLog セカンダリボタン"
  },
  "BoxLog Danger Button": {
    "prefix": "bl-btn-danger",
    "body": [
      "<DangerButton",
      "  intent=\"$1\"",
      "  requireConfirmation={true}",
      "  confirmationMessage=\"$2\"",
      "  onClick={$3}",
      ">",
      "  $4",
      "</DangerButton>"
    ],
    "description": "BoxLog 危険操作ボタン"
  },
  "BoxLog Card Layout": {
    "prefix": "bl-card",
    "body": [
      "<div className=\"bg-card text-card-foreground rounded-lg border shadow-sm p-6\">",
      "  $1",
      "</div>"
    ],
    "description": "BoxLog カードレイアウト"
  },
  "BoxLog Fade In Animation": {
    "prefix": "bl-anim-fade",
    "body": [
      "className=\"animate-page-fade-in $1\""
    ],
    "description": "BoxLog フェードインアニメーション"
  },
  "BoxLog Micro Interaction": {
    "prefix": "bl-anim-micro",
    "body": [
      "className=\"hover:animate-micro-heartbeat $1\""
    ],
    "description": "BoxLog マイクロインタラクション"
  },
  "BoxLog Neutral Colors": {
    "prefix": "bl-color-neutral",
    "body": [
      "className=\"bg-neutral-$1 text-neutral-$2 $3\""
    ],
    "description": "BoxLog Compass Neutralカラー"
  },
  "BoxLog 8px Grid Spacing": {
    "prefix": "bl-spacing",
    "body": [
      "className=\"p-$1 m-$2 gap-$3 $4\""
    ],
    "description": "BoxLog 8pxグリッドスペーシング"
  },

  "BoxLog AI Component": {
    "prefix": "blc",
    "body": [
      "import React from 'react'",
      "import { colors, spacing, typography } from '@/config/theme'",
      "import { createAppError, ERROR_CODES } from '@/config/error-patterns'",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:title: string}",
      "  ${3:children?: React.ReactNode}",
      "  ${4:onAction?: () => void}",
      "}",
      "",
      "export function ${1:ComponentName}({",
      "  ${2:title},",
      "  ${3:children},",
      "  ${4:onAction}",
      "}: ${1:ComponentName}Props) {",
      "  const handleAction = React.useCallback(() => {",
      "    try {",
      "      ${4:onAction}?.()",
      "    } catch (error) {",
      "      throw createAppError(",
      "        '${1:ComponentName}でエラーが発生しました',",
      "        ERROR_CODES.COMPONENT_ERROR",
      "      )",
      "    }",
      "  }, [${4:onAction}])",
      "",
      "  return (",
      "    <div className={`",
      "      \\${colors.background.surface}",
      "      \\${spacing.component.DEFAULT}",
      "      \\${colors.border.subtle}",
      "    `}>",
      "      <h2 className={typography.heading.h2}>",
      "        {${2:title}}",
      "      </h2>",
      "      {${3:children}}",
      "      {${4:onAction} && (",
      "        <button",
      "          type=\"button\"",
      "          onClick={handleAction}",
      "          className={`",
      "            \\${colors.button.primary}",
      "            \\${spacing.button.md}",
      "            \\${typography.button.md}",
      "          `}",
      "        >",
      "          ${5:実行}",
      "        </button>",
      "      )}",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:ComponentName}"
    ],
    "description": "BoxLog AI Component - テーマシステム＋エラーハンドリング完備"
  },

  "BoxLog AI Hook": {
    "prefix": "blh",
    "body": [
      "import { useState, useCallback } from 'react'",
      "import { createAppError, ERROR_CODES } from '@/config/error-patterns'",
      "",
      "interface Use${1:HookName}Result<T = unknown> {",
      "  data: T | null",
      "  loading: boolean",
      "  error: Error | null",
      "  ${2:execute}: () => Promise<void>",
      "}",
      "",
      "export function use${1:HookName}<T = unknown>(",
      "  ${3:operation: () => Promise<T>}",
      "): Use${1:HookName}Result<T> {",
      "  const [data, setData] = useState<T | null>(null)",
      "  const [loading, setLoading] = useState(false)",
      "  const [error, setError] = useState<Error | null>(null)",
      "",
      "  const ${2:execute} = useCallback(async () => {",
      "    try {",
      "      setLoading(true)",
      "      setError(null)",
      "      const result = await ${3:operation}()",
      "      setData(result)",
      "    } catch (err) {",
      "      const appError = createAppError(",
      "        '${1:HookName}でエラーが発生しました',",
      "        ERROR_CODES.HOOK_ERROR,",
      "        { originalError: err }",
      "      )",
      "      setError(appError)",
      "      throw appError",
      "    } finally {",
      "      setLoading(false)",
      "    }",
      "  }, [${3:operation}])",
      "",
      "  return { data, loading, error, ${2:execute} }",
      "}",
      "",
      "export default use${1:HookName}"
    ],
    "description": "BoxLog AI Hook - エラーハンドリング＋ローディング状態管理"
  },

  "BoxLog AI API Route": {
    "prefix": "bla",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server'",
      "import { z } from 'zod'",
      "import { createAppError, ERROR_CODES } from '@/config/error-patterns'",
      "",
      "const ${1:Request}Schema = z.object({",
      "  ${2:id: z.string()},",
      "  ${3:data: z.object({",
      "    ${4:// データ構造定義}",
      "  })}",
      "})",
      "",
      "type ApiResponse<T = unknown> = {",
      "  success: boolean",
      "  data?: T",
      "  error?: string",
      "  details?: unknown",
      "}",
      "",
      "export async function ${5:POST}(",
      "  request: NextRequest",
      "): Promise<NextResponse<ApiResponse>> {",
      "  try {",
      "    const body = await request.json()",
      "    const validated = ${1:Request}Schema.parse(body)",
      "",
      "    ${6:// ビジネスロジック}",
      "    const result = await process${1:Request}(validated)",
      "",
      "    return NextResponse.json({",
      "      success: true,",
      "      data: result",
      "    })",
      "  } catch (error) {",
      "    if (error instanceof z.ZodError) {",
      "      return NextResponse.json(",
      "        {",
      "          success: false,",
      "          error: 'バリデーションエラー',",
      "          details: error.errors",
      "        },",
      "        { status: 400 }",
      "      )",
      "    }",
      "",
      "    return NextResponse.json(",
      "      {",
      "        success: false,",
      "        error: 'サーバーエラーが発生しました'",
      "      },",
      "      { status: 500 }",
      "    )",
      "  }",
      "}",
      "",
      "async function process${1:Request}(data: z.infer<typeof ${1:Request}Schema>) {",
      "  ${7:// 処理実装}",
      "  return { processed: true, id: data.${2:id} }",
      "}"
    ],
    "description": "BoxLog AI API Route - Zodバリデーション＋エラーハンドリング完備"
  },

  "BoxLog AI Store": {
    "prefix": "bls",
    "body": [
      "import { create } from 'zustand'",
      "import { createAppError, ERROR_CODES } from '@/config/error-patterns'",
      "",
      "interface ${1:Item} {",
      "  id: string",
      "  ${2:name: string}",
      "  ${3:status: 'active' | 'inactive'}",
      "}",
      "",
      "interface ${1:Item}Store {",
      "  ${4:items}: ${1:Item}[]",
      "  loading: boolean",
      "  error: Error | null",
      "  ${5:fetchItems}: () => Promise<void>",
      "  ${6:updateItem}: (id: string, data: Partial<${1:Item}>) => Promise<void>",
      "}",
      "",
      "export const use${1:Item}Store = create<${1:Item}Store>((set, get) => ({",
      "  ${4:items}: [],",
      "  loading: false,",
      "  error: null,",
      "",
      "  ${5:fetchItems}: async () => {",
      "    try {",
      "      set({ loading: true, error: null })",
      "      const response = await fetch('/api/${4:items}')",
      "      if (!response.ok) {",
      "        throw createAppError('データ取得に失敗', ERROR_CODES.FETCH_ERROR)",
      "      }",
      "      const ${4:items} = await response.json()",
      "      set({ ${4:items}, loading: false })",
      "    } catch (error) {",
      "      set({ error: error as Error, loading: false })",
      "    }",
      "  },",
      "",
      "  ${6:updateItem}: async (id, data) => {",
      "    const original${1:Item}s = get().${4:items}",
      "",
      "    // 楽観的更新",
      "    set(state => ({",
      "      ${4:items}: state.${4:items}.map(item =>",
      "        item.id === id ? { ...item, ...data } : item",
      "      )",
      "    }))",
      "",
      "    try {",
      "      const response = await fetch(`/api/${4:items}/\\${id}`, {",
      "        method: 'PATCH',",
      "        headers: { 'Content-Type': 'application/json' },",
      "        body: JSON.stringify(data)",
      "      })",
      "      if (!response.ok) {",
      "        throw createAppError('更新に失敗', ERROR_CODES.UPDATE_ERROR)",
      "      }",
      "    } catch (error) {",
      "      // ロールバック",
      "      set({ ${4:items}: original${1:Item}s, error: error as Error })",
      "    }",
      "  }",
      "}))",
      "",
      "export default use${1:Item}Store"
    ],
    "description": "BoxLog AI Store - Zustand楽観的更新＋エラーハンドリング"
  }
}