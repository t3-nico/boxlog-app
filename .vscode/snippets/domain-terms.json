{
  "React Component with Domain Term": {
    "prefix": ["rfc-domain", "component-domain"],
    "body": [
      "import React from 'react'",
      "import { ${1|Button,Card,Modal,Input,Select,Table,Form,Header,Sidebar,Layout|} } from '@/components/ui/${1/([A-Z])/\\l$1/g}'",
      "import { colors, spacing, typography } from '@/config/theme'",
      "import { ErrorBoundary } from '@/components/error/ErrorBoundary'",
      "",
      "interface ${2:${TM_FILENAME_BASE/([a-z-]+)/${1:/pascalcase}/g}}Props {",
      "  ${3:children?: React.ReactNode}",
      "}",
      "",
      "export function ${2:${TM_FILENAME_BASE/([a-z-]+)/${1:/pascalcase}/g}}({ ${4:children} }: ${2}Props) {",
      "  return (",
      "    <ErrorBoundary>",
      "      <div className={colors.background.${5|base,card,muted|}>",
      "        <h2 className={typography.heading.h2}>",
      "          ${6:${2/([A-Z])/\\l$1/g}}",
      "        </h2>",
      "        {${4}}",
      "      </div>",
      "    </ErrorBoundary>",
      "  )",
      "}"
    ],
    "description": "BoxLog App ドメイン用語を使用したReactコンポーネント"
  },

  "Custom Hook with Domain Term": {
    "prefix": ["hook-domain", "use-domain"],
    "body": [
      "import { useState, useCallback } from 'react'",
      "import useSWR from 'swr'",
      "import { createAppError, ERROR_CODES } from '@/config/error-patterns'",
      "import { BusinessRuleRegistry } from '@/generated/business-rules'",
      "import { ${1:${TM_FILENAME_BASE/use-([a-z-]+)/${1:/pascalcase}/g}} } from '@/types/${2:${TM_FILENAME_BASE/use-([a-z-]+)/$1/g}}'",
      "import { fetcher } from '@/lib/api'",
      "",
      "export interface Use${1}Return {",
      "  ${3:items}: ${1}[] | undefined",
      "  loading: boolean",
      "  error: Error | null",
      "  ${4:create}: (data: Partial<${1}>) => Promise<${1}>",
      "  refresh: () => void",
      "}",
      "",
      "export function use${1}(): Use${1}Return {",
      "  const [loading, setLoading] = useState(false)",
      "",
      "  const {",
      "    data: ${3},",
      "    error,",
      "    mutate: refresh",
      "  } = useSWR<${1}[]>('/${2}', fetcher)",
      "",
      "  const ${4} = useCallback(async (data: Partial<${1}>): Promise<${1}> => {",
      "    setLoading(true)",
      "    try {",
      "      // ビジネスルール検証",
      "      await BusinessRuleRegistry.validateBusinessRules('${2}', data, 'create')",
      "",
      "      const response = await fetch('/${2}', {",
      "        method: 'POST',",
      "        headers: { 'Content-Type': 'application/json' },",
      "        body: JSON.stringify(data),",
      "      })",
      "",
      "      if (!response.ok) {",
      "        throw createAppError('${1}の作成に失敗しました', ERROR_CODES.API_REQUEST_FAILED)",
      "      }",
      "",
      "      const new${1} = await response.json()",
      "      refresh()",
      "      return new${1}",
      "    } catch (error) {",
      "      throw error",
      "    } finally {",
      "      setLoading(false)",
      "    }",
      "  }, [refresh])",
      "",
      "  return {",
      "    ${3},",
      "    loading,",
      "    error,",
      "    ${4},",
      "    refresh,",
      "  }",
      "}"
    ],
    "description": "BoxLog App ドメイン用語を使用したカスタムフック"
  },

  "TypeScript Type with Domain Term": {
    "prefix": ["type-domain", "interface-domain"],
    "body": [
      "import { z } from 'zod'",
      "import { BusinessRuleRegistry } from '@/generated/business-rules'",
      "",
      "// Zodスキーマ定義",
      "export const ${1:${TM_FILENAME_BASE/([a-z-]+)/${1:/pascalcase}/g}}Schema = z.object({",
      "  id: z.string().uuid(),",
      "  ${2:title}: z.string().min(1, '${3:タイトル}は必須です'),",
      "  ${4:description}: z.string().optional(),",
      "  ${5:status}: z.enum(['${6|draft,active,completed,archived|}'], {",
      "    errorMap: () => ({ message: 'ステータスを選択してください' })",
      "  }),",
      "  createdAt: z.date(),",
      "  updatedAt: z.date(),",
      "",
      "  // ビジネスルール辞書から自動生成",
      "  ...BusinessRuleRegistry.getSchema('${7:${TM_FILENAME_BASE/([a-z-]+)/$1/g}}'),",
      "})",
      "",
      "// 型定義",
      "export type ${1} = z.infer<typeof ${1}Schema>",
      "",
      "// 作成用型（IDと日時を除く）",
      "export const Create${1}Schema = ${1}Schema.omit({",
      "  id: true,",
      "  createdAt: true,",
      "  updatedAt: true,",
      "})",
      "",
      "export type Create${1} = z.infer<typeof Create${1}Schema>",
      "",
      "// 更新用型（部分的な更新を許可）",
      "export const Update${1}Schema = Create${1}Schema.partial()",
      "",
      "export type Update${1} = z.infer<typeof Update${1}Schema>"
    ],
    "description": "BoxLog App ドメイン用語を使用したTypeScript型定義"
  },

  "API Route with Domain Term": {
    "prefix": ["api-domain", "route-domain"],
    "body": [
      "import { NextRequest, NextResponse } from 'next/server'",
      "import { z } from 'zod'",
      "import {",
      "  createAppError,",
      "  executeWithAutoRecovery,",
      "  ERROR_CODES",
      "} from '@/config/error-patterns'",
      "import { BusinessRuleRegistry } from '@/generated/business-rules'",
      "import { ${1:${TM_FILENAME_BASE/([a-z-]+)/${1:/pascalcase}/g}}Schema, Create${1}Schema } from '@/schemas/${2:${TM_FILENAME_BASE/([a-z-]+)/$1/g}}.schema'",
      "import { authenticateRequest, authorizeAction } from '@/lib/auth'",
      "import { rateLimit } from '@/lib/rate-limit'",
      "import { db } from '@/lib/database'",
      "",
      "// レート制限設定",
      "const limiter = rateLimit({",
      "  interval: 60 * 1000, // 1分間",
      "  uniqueTokenPerInterval: 500,",
      "})",
      "",
      "/**",
      " * ${1}一覧取得 API",
      " * GET /api/${2}",
      " */",
      "export async function GET(request: NextRequest): Promise<NextResponse> {",
      "  try {",
      "    // レート制限チェック",
      "    await limiter.check(request, 10, '${2}:list')",
      "",
      "    // 認証チェック",
      "    const session = await authenticateRequest(request)",
      "    if (!session) {",
      "      throw createAppError('認証が必要です', ERROR_CODES.AUTH_REQUIRED)",
      "    }",
      "",
      "    // 認可チェック",
      "    await authorizeAction(session.user, '${2}', 'read')",
      "",
      "    // データベース操作（自動復旧機能付き）",
      "    const result = await executeWithAutoRecovery(",
      "      async () => {",
      "        return await db.${3:${2/([a-z-]+)/${1:/camelcase}/g}}.findMany({",
      "          where: {",
      "            // 権限に基づくフィルタリング",
      "            ...BusinessRuleRegistry.getAccessFilter('${2}', session.user)",
      "          },",
      "          orderBy: { createdAt: 'desc' }",
      "        })",
      "      },",
      "      ERROR_CODES.DATABASE_READ_ERROR",
      "    )",
      "",
      "    if (!result.success) {",
      "      throw result.error",
      "    }",
      "",
      "    return NextResponse.json(result.data)",
      "",
      "  } catch (error) {",
      "    return handleApiError(error)",
      "  }",
      "}",
      "",
      "/**",
      " * ${1}新規作成 API",
      " * POST /api/${2}",
      " */",
      "export async function POST(request: NextRequest): Promise<NextResponse> {",
      "  try {",
      "    // レート制限チェック",
      "    await limiter.check(request, 5, '${2}:create')",
      "",
      "    // 認証チェック",
      "    const session = await authenticateRequest(request)",
      "    if (!session) {",
      "      throw createAppError('認証が必要です', ERROR_CODES.AUTH_REQUIRED)",
      "    }",
      "",
      "    // 認可チェック",
      "    await authorizeAction(session.user, '${2}', 'create')",
      "",
      "    // リクエストボディの取得",
      "    const body = await request.json()",
      "",
      "    // Zodスキーマでバリデーション",
      "    const validatedData = Create${1}Schema.parse(body)",
      "",
      "    // ビジネスルール検証",
      "    await BusinessRuleRegistry.validateBusinessRules('${2}', validatedData, 'create')",
      "",
      "    // データベース操作",
      "    const result = await executeWithAutoRecovery(",
      "      async () => {",
      "        return await db.${3}.create({",
      "          data: {",
      "            ...validatedData,",
      "            createdBy: session.user.id,",
      "            updatedBy: session.user.id,",
      "          }",
      "        })",
      "      },",
      "      ERROR_CODES.DATABASE_CREATE_ERROR",
      "    )",
      "",
      "    if (!result.success) {",
      "      throw result.error",
      "    }",
      "",
      "    return NextResponse.json(result.data, { status: 201 })",
      "",
      "  } catch (error) {",
      "    return handleApiError(error)",
      "  }",
      "}",
      "",
      "function handleApiError(error: unknown): NextResponse {",
      "  // エラーハンドリングの実装",
      "  console.error('API Error:', error)",
      "  return NextResponse.json(",
      "    { error: 'Internal Server Error' },",
      "    { status: 500 }",
      "  )",
      "}"
    ],
    "description": "BoxLog App ドメイン用語を使用したAPI Route"
  },

  "Form Component with Domain Term": {
    "prefix": ["form-domain", "form-component"],
    "body": [
      "import React from 'react'",
      "import { useForm } from 'react-hook-form'",
      "import { zodResolver } from '@hookform/resolvers/zod'",
      "import { Save, X } from 'lucide-react'",
      "",
      "import { ${1:${TM_FILENAME_BASE/([a-z-]+)-form/${1:/pascalcase}/g}}Schema, type ${1}Data } from '@/schemas/${2:${TM_FILENAME_BASE/([a-z-]+)-form/$1/g}}-form.schema'",
      "import { Button } from '@/components/ui/button'",
      "import { Input } from '@/components/ui/input'",
      "import { Textarea } from '@/components/ui/textarea'",
      "import { Label } from '@/components/ui/label'",
      "import {",
      "  Form,",
      "  FormControl,",
      "  FormField,",
      "  FormItem,",
      "  FormLabel,",
      "  FormMessage,",
      "} from '@/components/ui/form'",
      "import {",
      "  Card,",
      "  CardContent,",
      "  CardFooter,",
      "  CardHeader,",
      "  CardTitle,",
      "} from '@/components/ui/card'",
      "import { colors, spacing, typography } from '@/config/theme'",
      "import { LoadingSpinner } from '@/components/common/LoadingSpinner'",
      "import { ErrorBoundary } from '@/components/error/ErrorBoundary'",
      "",
      "interface ${1}FormProps {",
      "  initialData?: Partial<${1}Data>",
      "  onSubmit: (data: ${1}Data) => Promise<void>",
      "  onCancel?: () => void",
      "  loading?: boolean",
      "  title?: string",
      "}",
      "",
      "export function ${1}Form({",
      "  initialData,",
      "  onSubmit,",
      "  onCancel,",
      "  loading = false,",
      "  title = '${3:${1/([A-Z])/\\l$1/g}}フォーム'",
      "}: ${1}FormProps) {",
      "  const form = useForm<${1}Data>({",
      "    resolver: zodResolver(${1}Schema),",
      "    defaultValues: {",
      "      ${4:title}: '',",
      "      ${5:description}: '',",
      "      ...initialData,",
      "    },",
      "  })",
      "",
      "  const handleSubmit = async (data: ${1}Data) => {",
      "    try {",
      "      await onSubmit(data)",
      "    } catch (error) {",
      "      console.error('フォーム送信エラー:', error)",
      "    }",
      "  }",
      "",
      "  return (",
      "    <ErrorBoundary>",
      "      <Card className={colors.background.card}>",
      "        <CardHeader>",
      "          <CardTitle className={typography.heading.h2}>",
      "            {title}",
      "          </CardTitle>",
      "        </CardHeader>",
      "",
      "        <Form {...form}>",
      "          <form onSubmit={form.handleSubmit(handleSubmit)}>",
      "            <CardContent className={`space-y-4 ${spacing.component.section.md}`}>",
      "",
      "              {/* ${4} フィールド */}",
      "              <FormField",
      "                control={form.control}",
      "                name=\"${4}\"",
      "                render={({ field }) => (",
      "                  <FormItem>",
      "                    <FormLabel className={typography.label.base}>",
      "                      ${6:タイトル}",
      "                    </FormLabel>",
      "                    <FormControl>",
      "                      <Input",
      "                        placeholder=\"${6}を入力してください\"",
      "                        className={colors.input.default}",
      "                        disabled={loading}",
      "                        {...field}",
      "                      />",
      "                    </FormControl>",
      "                    <FormMessage />",
      "                  </FormItem>",
      "                )}",
      "              />",
      "",
      "              {/* ${5} フィールド */}",
      "              <FormField",
      "                control={form.control}",
      "                name=\"${5}\"",
      "                render={({ field }) => (",
      "                  <FormItem>",
      "                    <FormLabel className={typography.label.base}>",
      "                      ${7:説明}",
      "                    </FormLabel>",
      "                    <FormControl>",
      "                      <Textarea",
      "                        placeholder=\"${7}を入力してください\"",
      "                        className={colors.input.default}",
      "                        disabled={loading}",
      "                        {...field}",
      "                      />",
      "                    </FormControl>",
      "                    <FormMessage />",
      "                  </FormItem>",
      "                )}",
      "              />",
      "",
      "            </CardContent>",
      "",
      "            <CardFooter className={`flex justify-end space-x-2 ${spacing.component.button.md}`}>",
      "              {onCancel && (",
      "                <Button",
      "                  type=\"button\"",
      "                  variant=\"outline\"",
      "                  onClick={onCancel}",
      "                  disabled={loading}",
      "                >",
      "                  <X className=\"w-4 h-4 mr-2\" />",
      "                  キャンセル",
      "                </Button>",
      "              )}",
      "              <Button",
      "                type=\"submit\"",
      "                disabled={loading}",
      "                className={colors.primary.DEFAULT}",
      "              >",
      "                {loading ? (",
      "                  <LoadingSpinner className=\"w-4 h-4 mr-2\" />",
      "                ) : (",
      "                  <Save className=\"w-4 h-4 mr-2\" />",
      "                )}",
      "                保存",
      "              </Button>",
      "            </CardFooter>",
      "          </form>",
      "        </Form>",
      "      </Card>",
      "    </ErrorBoundary>",
      "  )",
      "}"
    ],
    "description": "BoxLog App ドメイン用語を使用したフォームコンポーネント"
  },

  "Domain Term Variables": {
    "prefix": ["var-domain", "variables"],
    "body": [
      "// ${1|認証,ユーザー,タスク,プロジェクト,通知,ダッシュボード,分析,コメント,添付ファイル|} 関連変数",
      "const ${2:isLoading} = ${3:false}",
      "const ${4:hasPermission} = ${5:true}",
      "const ${6:canEdit} = ${7:false}",
      "const ${8:shouldUpdate} = ${9:true}",
      "",
      "// データ取得",
      "const ${10:${1/認証/authentication/g}${1/ユーザー/user/g}${1/タスク/task/g}${1/プロジェクト/project/g}${1/通知/notification/g}${1/ダッシュボード/dashboard/g}${1/分析/analytics/g}${1/コメント/comment/g}${1/添付ファイル/attachment/g}}List = ${11:await fetch('/api/${1/認証/auth/g}${1/ユーザー/users/g}${1/タスク/tasks/g}${1/プロジェクト/projects/g}${1/通知/notifications/g}${1/ダッシュボード/dashboard/g}${1/分析/analytics/g}${1/コメント/comments/g}${1/添付ファイル/attachments/g}')}",
      "const current${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g} = ${12:null}",
      "",
      "// イベントハンドラー",
      "const handle${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Create = ${13:() => {}}",
      "const handle${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Update = ${14:() => {}}",
      "const handle${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Delete = ${15:() => {}}"
    ],
    "description": "BoxLog App ドメイン用語を使用した変数定義"
  },

  "Constants with Domain Terms": {
    "prefix": ["const-domain", "constants"],
    "body": [
      "// ${1|認証,ユーザー,タスク,プロジェクト,通知,ダッシュボード,分析,コメント,添付ファイル|} 関連定数",
      "export const ${2:${1/認証/AUTHENTICATION/g}${1/ユーザー/USER/g}${1/タスク/TASK/g}${1/プロジェクト/PROJECT/g}${1/通知/NOTIFICATION/g}${1/ダッシュボード/DASHBOARD/g}${1/分析/ANALYTICS/g}${1/コメント/COMMENT/g}${1/添付ファイル/ATTACHMENT/g}}_STATUS = {",
      "  ${3|DRAFT,ACTIVE,COMPLETED,ARCHIVED,PENDING,APPROVED,REJECTED|}: '${3/([A-Z]+)/${1:/downcase}/g}',",
      "  ${4|DRAFT,ACTIVE,COMPLETED,ARCHIVED,PENDING,APPROVED,REJECTED|}: '${4/([A-Z]+)/${1:/downcase}/g}',",
      "  ${5|DRAFT,ACTIVE,COMPLETED,ARCHIVED,PENDING,APPROVED,REJECTED|}: '${5/([A-Z]+)/${1:/downcase}/g}',",
      "} as const",
      "",
      "export const ${2}_ROLES = {",
      "  ${6|ADMIN,MANAGER,MEMBER,VIEWER,OWNER,EDITOR|}: '${6/([A-Z]+)/${1:/downcase}/g}',",
      "  ${7|ADMIN,MANAGER,MEMBER,VIEWER,OWNER,EDITOR|}: '${7/([A-Z]+)/${1:/downcase}/g}',",
      "  ${8|ADMIN,MANAGER,MEMBER,VIEWER,OWNER,EDITOR|}: '${8/([A-Z]+)/${1:/downcase}/g}',",
      "} as const",
      "",
      "export const ${2}_PERMISSIONS = {",
      "  READ: 'read',",
      "  WRITE: 'write',",
      "  DELETE: 'delete',",
      "  ADMIN: 'admin',",
      "} as const",
      "",
      "// 型定義",
      "export type ${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Status = typeof ${2}_STATUS[keyof typeof ${2}_STATUS]",
      "export type ${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Role = typeof ${2}_ROLES[keyof typeof ${2}_ROLES]",
      "export type ${1/認証/Authentication/g}${1/ユーザー/User/g}${1/タスク/Task/g}${1/プロジェクト/Project/g}${1/通知/Notification/g}${1/ダッシュボード/Dashboard/g}${1/分析/Analytics/g}${1/コメント/Comment/g}${1/添付ファイル/Attachment/g}Permission = typeof ${2}_PERMISSIONS[keyof typeof ${2}_PERMISSIONS]"
    ],
    "description": "BoxLog App ドメイン用語を使用した定数定義"
  }
}