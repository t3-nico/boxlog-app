{
  "BoxLog React Component": {
    "prefix": "blcomp",
    "body": [
      "import { FC } from 'react'",
      "import { colors, typography } from '@/config/theme'",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:title}: string",
      "  ${3:onAction}: () => void",
      "}",
      "",
      "export const ${1:ComponentName}: FC<${1:ComponentName}Props> = ({",
      "  ${2:title},",
      "  ${3:onAction}",
      "}) => {",
      "  return (",
      "    <div className={colors.background.base}>",
      "      <h2 className={typography.heading.h2}>{${2:title}}</h2>",
      "      <button type=\"button\" onClick={${3:onAction}}>",
      "        Action",
      "      </button>",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "BoxLog標準Reactコンポーネント（テーマシステム使用）"
  },
  "BoxLog Async Function": {
    "prefix": "blasync",
    "body": [
      "async function ${1:functionName}(${2:param}: ${3:string}): Promise<${4:void}> {",
      "  try {",
      "    ${5:// 処理}",
      "  } catch (error) {",
      "    console.error('${1:functionName} failed:', error)",
      "    throw error",
      "  }",
      "}",
      ""
    ],
    "description": "BoxLog標準非同期関数（エラーハンドリング込み）"
  },
  "BoxLog API Fetch": {
    "prefix": "blfetch",
    "body": [
      "async function ${1:fetchData}(${2:id}: string) {",
      "  try {",
      "    const response = await fetch(`/api/${3:endpoint}/${${2:id}}`)",
      "    if (!response.ok) {",
      "      throw new Error(`HTTP error! status: \\${response.status}`)",
      "    }",
      "    return await response.json()",
      "  } catch (error) {",
      "    console.error('Failed to fetch ${3:endpoint}:', error)",
      "    throw error",
      "  }",
      "}",
      ""
    ],
    "description": "BoxLog標準API fetch関数"
  },
  "BoxLog TypeScript Interface": {
    "prefix": "bltype",
    "body": [
      "interface ${1:TypeName} {",
      "  id: string",
      "  ${2:name}: string",
      "  ${3:createdAt}: string",
      "}",
      ""
    ],
    "description": "BoxLog標準TypeScriptインターフェース"
  },
  "BoxLog useState Hook": {
    "prefix": "blstate",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:string}>(${3:''})",
      ""
    ],
    "description": "BoxLog標準useState（型安全）"
  },
  "BoxLog useEffect Hook": {
    "prefix": "bleffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// 処理}",
      "  ",
      "  return () => {",
      "    ${2:// クリーンアップ}",
      "  }",
      "}, [${3:deps}])",
      ""
    ],
    "description": "BoxLog標準useEffect（クリーンアップ込み）"
  },
  "BoxLog Form Component": {
    "prefix": "blform",
    "body": [
      "import { FC, FormEvent } from 'react'",
      "import { colors, spacing, typography } from '@/config/theme'",
      "",
      "interface ${1:FormName}Props {",
      "  onSubmit: (data: ${2:FormData}) => void",
      "}",
      "",
      "export const ${1:FormName}: FC<${1:FormName}Props> = ({ onSubmit }) => {",
      "  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {",
      "    e.preventDefault()",
      "    const formData = new FormData(e.currentTarget)",
      "    const data = {",
      "      ${3:field}: formData.get('${3:field}') as string,",
      "    }",
      "    onSubmit(data)",
      "  }",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit} className={spacing.component.md}>",
      "      <label className={typography.label.base}>",
      "        ${3:Field}:",
      "        <input",
      "          type=\"text\"",
      "          name=\"${3:field}\"",
      "          required",
      "        />",
      "      </label>",
      "      <button type=\"submit\">Submit</button>",
      "    </form>",
      "  )",
      "}",
      ""
    ],
    "description": "BoxLog標準フォームコンポーネント"
  },
  "BoxLog Error Boundary": {
    "prefix": "blerror",
    "body": [
      "try {",
      "  ${1:// 処理}",
      "} catch (error) {",
      "  console.error('${2:Operation} failed:', error)",
      "  ${3:// エラーハンドリング}",
      "  throw error",
      "}",
      ""
    ],
    "description": "BoxLog標準エラーハンドリング"
  },
  "BoxLog Memoized Component": {
    "prefix": "blmemo",
    "body": [
      "import { FC, memo } from 'react'",
      "import { colors } from '@/config/theme'",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:data}: ${3:string}",
      "}",
      "",
      "export const ${1:ComponentName}: FC<${1:ComponentName}Props> = memo(({ ${2:data} }) => {",
      "  return (",
      "    <div className={colors.background.base}>",
      "      {${2:data}}",
      "    </div>",
      "  )",
      "})",
      ""
    ],
    "description": "BoxLog標準メモ化コンポーネント（パフォーマンス最適化）"
  },
  "BoxLog useMemo Hook": {
    "prefix": "blusememo",
    "body": [
      "const ${1:memoizedValue} = useMemo(",
      "  () => ${2:computeExpensiveValue}(${3:input}),",
      "  [${3:input}]",
      ")",
      ""
    ],
    "description": "BoxLog標準useMemo（重い計算の最適化）"
  }
}