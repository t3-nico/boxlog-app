name: 🛡️ OWASP ZAP Security Scan

on:
  schedule:
    # 毎週月曜 2:00 JST に実行
    - cron: '0 17 * * 0'  # 日曜 17:00 UTC = 月曜 2:00 JST
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Scan type'
        required: true
        default: 'baseline'
        type: choice
        options:
          - baseline
          - full

env:
  TARGET_URL: 'https://boxlog-app.vercel.app'

# 同じブランチで複数実行された場合、古い実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# セキュリティ: 最小権限の原則
permissions:
  contents: read              # コード読み取り
  security-events: write      # セキュリティアラート作成
  pull-requests: write        # 脆弱性レポート投稿
  issues: write               # Critical脆弱性検出時にIssue作成

jobs:
  # =====================================
  # 🔍 ZAP Baseline Scan（基本スキャン）
  # =====================================
  zap-baseline:
    name: 🔍 ZAP Baseline Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_type != 'full'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: 🔍 ZAP Baseline Scan
        uses: zaproxy/action-baseline@906a3c93ffde4864839d31a93daadcbd2737b4da  # v0.12.0
        with:
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -T 15'  # AJAX spider, JSON report, 15min timeout
          fail_action: false  # Phase 1では失敗させない

      - name: 📊 Upload ZAP Report (HTML)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        if: always()
        with:
          name: zap-baseline-report-html
          path: report_html.html
          retention-days: 30

      - name: 📊 Upload ZAP Report (JSON)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        if: always()
        with:
          name: zap-baseline-report-json
          path: report_json.json
          retention-days: 30

      - name: 💬 Create GitHub Issue for High/Critical Alerts
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const fs = require('fs');

            // JSONレポート読み込み
            let report;
            try {
              const data = fs.readFileSync('report_json.json', 'utf8');
              report = JSON.parse(data);
            } catch (error) {
              console.log('No JSON report found');
              return;
            }

            // High/Critical アラートのフィルタリング
            const alerts = report.site?.[0]?.alerts || [];
            const criticalAlerts = alerts.filter(a =>
              a.riskcode === '3' || a.riskcode === '2'  // High or Critical
            );

            if (criticalAlerts.length === 0) {
              console.log('✅ No critical alerts found');
              return;
            }

            // Issue作成
            const body = `## 🚨 OWASP ZAP Security Scan Alert

            **Scan Date**: ${new Date().toISOString()}
            **Target**: ${process.env.TARGET_URL}
            **Critical/High Alerts**: ${criticalAlerts.length}

            ### Alerts

            ${criticalAlerts.map(alert => `
            #### ${alert.name}
            - **Risk**: ${alert.riskdesc}
            - **Confidence**: ${alert.confidence}
            - **Description**: ${alert.desc}
            - **Solution**: ${alert.solution}
            - **URLs**: ${alert.instances?.length || 0} instance(s)
            `).join('\n')}

            ### Reports
            - [HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [JSON Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Auto-generated by OWASP ZAP Security Scan**
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert: ${criticalAlerts.length} Critical/High Issues Found`,
              body: body,
              labels: ['security', 'P0-urgent']
            });

  # =====================================
  # 🔍 ZAP Full Scan（完全スキャン）
  # =====================================
  zap-full:
    name: 🔍 ZAP Full Scan
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event.inputs.scan_type == 'full'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1

      - name: 🔍 ZAP Full Scan
        uses: zaproxy/action-full-scan@d2a07475d467566c9a3e3c700f31f47724aa1060  # v0.10.0
        with:
          target: ${{ env.TARGET_URL }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -T 60'
          fail_action: false

      - name: 📊 Upload Full Scan Report (HTML)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        if: always()
        with:
          name: zap-full-report-html
          path: report_html.html
          retention-days: 90

      - name: 📊 Upload Full Scan Report (JSON)
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        if: always()
        with:
          name: zap-full-report-json
          path: report_json.json
          retention-days: 90

  # =====================================
  # 📊 Scan Summary
  # =====================================
  scan-summary:
    name: 📊 Scan Summary
    runs-on: ubuntu-latest
    needs: [zap-baseline]
    if: always() && needs.zap-baseline.result != 'skipped'

    steps:
      - name: 📥 Download Reports
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427  # v4.1.4
        with:
          name: zap-baseline-report-json
        continue-on-error: true

      - name: 📊 Generate Summary
        run: |
          echo "## 🛡️ OWASP ZAP Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: ${{ env.TARGET_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f report_json.json ]; then
            # JSONレポートから統計を抽出（簡易版）
            echo "✅ Scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📊 Detailed reports are available in the artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No report found" >> $GITHUB_STEP_SUMMARY
          fi
