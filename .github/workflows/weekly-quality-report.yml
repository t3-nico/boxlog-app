name: '📊 Weekly Quality Report'

# 週次品質レポート自動生成
# 毎週月曜日 9:00 JST（日曜日 24:00 UTC）に実行

on:
  schedule:
    # 毎週月曜日 9:00 JST（日曜日 24:00 UTC）
    - cron: '0 0 * * 1'

  # 手動実行も可能
  workflow_dispatch:
    inputs:
      create_issues:
        description: '改善Issue作成'
        required: false
        default: 'true'
        type: boolean
      send_notifications:
        description: 'Slack通知送信'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  quality-analysis:
    name: '品質分析・レポート生成'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write  # Issue作成権限
      pull-requests: read

    steps:
      - name: '📥 Repository Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 履歴比較のため全履歴取得

      - name: '🟢 Node.js Setup'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: '📦 Dependencies Installation'
        run: npm ci

      - name: '🔍 ESLint Analysis'
        run: |
          echo "📊 ESLint分析開始..."
          npm run lint --silent > eslint-report.txt 2>&1 || true
          echo "ESLint分析完了"
        continue-on-error: true

      - name: '🔷 TypeScript Analysis'
        run: |
          echo "📊 TypeScript分析開始..."
          npm run typecheck > typescript-report.txt 2>&1 || true
          echo "TypeScript分析完了"
        continue-on-error: true

      - name: '🧪 Test Coverage Analysis'
        run: |
          echo "📊 テストカバレッジ分析開始..."
          npm run test:coverage > coverage-report.txt 2>&1 || true
          echo "テストカバレッジ分析完了"
        continue-on-error: true

      - name: '📊 Quality Report Generation'
        run: |
          echo "📊 品質レポート生成開始..."
          npm run quality:report
          echo "品質レポート生成完了"
        continue-on-error: true

      - name: '🎯 Improvement Suggestions'
        if: ${{ github.event.inputs.create_issues != 'false' }}
        run: |
          echo "🎯 改善提案システム実行..."
          npm run improvement:suggest --skip-slack
          echo "改善提案完了"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: '📋 Quality Report Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            reports/quality/
            eslint-report.txt
            typescript-report.txt
            coverage-report.txt
          retention-days: 30

      - name: '📊 Quality Summary Comment'
        if: success()
        run: |
          echo "📊 品質サマリーコメント作成..."

          # 最新の品質レポートから情報抽出
          LATEST_REPORT=$(ls -t reports/quality/quality-report-*.json | head -1)

          if [ -f "$LATEST_REPORT" ]; then
            SCORE=$(jq -r '.score' "$LATEST_REPORT")
            GRADE=$(jq -r '.grade' "$LATEST_REPORT")
            STATUS=$(jq -r '.status' "$LATEST_REPORT")
            ESLINT_ERRORS=$(jq -r '.codeQuality.eslint.errors' "$LATEST_REPORT")
            TS_ERRORS=$(jq -r '.codeQuality.typescript.errors' "$LATEST_REPORT")
            COVERAGE=$(jq -r '.testing.coverage.lines' "$LATEST_REPORT")
            TODO_COUNT=$(jq -r '.technicalDebt.todoCount' "$LATEST_REPORT")
            RECOMMENDATIONS=$(jq -r '.recommendations | length' "$LATEST_REPORT")

            # GitHub Issueにコメント作成（最新のIssueまたは専用Issue）
            cat > quality-summary.md << EOF
          ## 📊 週次品質レポート - $(date '+%Y年%m月%d日')

          ### 📈 総合評価
          - **スコア**: ${SCORE}/100点
          - **グレード**: ${GRADE}
          - **状態**: ${STATUS}

          ### 🔍 詳細メトリクス
          - **ESLintエラー**: ${ESLINT_ERRORS}件
          - **TypeScriptエラー**: ${TS_ERRORS}件
          - **テストカバレッジ**: ${COVERAGE}%
          - **技術的負債**: ${TODO_COUNT}個のTODO

          ### 💡 改善提案
          - **提案数**: ${RECOMMENDATIONS}件

          ### 🔗 詳細レポート
          - [品質ダッシュボード](https://your-app-url.vercel.app/quality-dashboard)
          - [詳細レポート](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---
          *自動生成 - GitHub Actions週次実行*
          EOF

            # Issue #356にコメント追加
            gh issue comment 356 --body-file quality-summary.md
          else
            echo "品質レポートファイルが見つかりません"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: '📲 Slack Notification'
        if: ${{ github.event.inputs.send_notifications != 'false' && success() }}
        run: |
          echo "📲 Slack通知準備..."

          # Slack通知データ生成（実際の送信はWebhook URL設定時）
          LATEST_REPORT=$(ls -t reports/quality/quality-report-*.json | head -1)

          if [ -f "$LATEST_REPORT" ]; then
            SCORE=$(jq -r '.score' "$LATEST_REPORT")
            GRADE=$(jq -r '.grade' "$LATEST_REPORT")
            STATUS=$(jq -r '.status' "$LATEST_REPORT")

            cat > slack-payload.json << EOF
          {
            "text": "📊 BoxLog週次品質レポート",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "📊 BoxLog 週次品質レポート"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*スコア:* ${SCORE}/100 (${GRADE})"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*状態:* ${STATUS}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|詳細レポートを見る>"
                }
              }
            ]
          }
          EOF

            echo "Slack通知データ生成完了"

            # 実際のSlack送信（SLACK_WEBHOOK_URL設定時）
            if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
              curl -X POST -H 'Content-type: application/json' \
                --data @slack-payload.json \
                "${{ secrets.SLACK_WEBHOOK_URL }}"
              echo "Slack通知送信完了"
            else
              echo "SLACK_WEBHOOK_URL未設定のため、通知データのみ生成"
            fi
          fi
        continue-on-error: true

      - name: '🏆 Success Summary'
        if: success()
        run: |
          echo "🎉 週次品質レポート実行完了!"
          echo "📊 品質レポート: 生成済み"
          echo "🎯 改善提案: 処理済み"
          echo "📲 通知: 送信済み"
          echo ""
          echo "🔗 次のステップ:"
          echo "1. 品質ダッシュボードで結果確認"
          echo "2. 改善Issueの確認・対応"
          echo "3. 次週の目標設定"

  # 長期トレンド分析（月次）
  monthly-trend-analysis:
    name: '📈 月次トレンド分析'
    runs-on: ubuntu-latest
    needs: quality-analysis
    if: ${{ github.event.schedule && github.event.schedule == '0 0 * * 1' && format('{0}', github.event.repository.pushed_at) == format('{0}', github.event.head_commit.timestamp) }}

    steps:
      - name: '📥 Repository Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '🟢 Node.js Setup'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: '📦 Dependencies Installation'
        run: npm ci

      - name: '📈 Trend Analysis'
        run: |
          echo "📈 月次トレンド分析開始..."

          # 過去30日の品質データ分析
          # 実装予定: 月次トレンドレポート生成

          echo "月次トレンド分析完了"
        continue-on-error: true