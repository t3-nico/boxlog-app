name: üìÖ BoxLog Scheduled Tasks

on:
  schedule:
    # ÊØéÈÄ±ÊúàÊõú 0:00 UTC (9:00 JST) - ÈÄ±Ê¨°ÂìÅË≥™„É¨„Éù„Éº„Éà
    - cron: '0 0 * * 1'
    # ÊØéÊó• 0:00 UTC (9:00 JST) - „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security-only
          - quality-only
          - compliance-only

env:
  NODE_VERSION: '18'

jobs:
  # =====================================
  # üîê Êó•Ê¨°: „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª
  # =====================================

  security-audit:
    name: üîê Security Audit
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 0 * * *' ||
      github.event.inputs.task_type == 'all' ||
      github.event.inputs.task_type == 'security-only'
    timeout-minutes: 15
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîê Setup 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: üîç Run 1Password audit
        run: npm run 1password:audit
        continue-on-error: true

      - name: üßπ Cleanup unused secrets
        run: npm run 1password:cleanup
        continue-on-error: true

      - name: üîç Scan for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true

      - name: üìä Upload security audit
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            secrets-audit-*.json
            .boxlog-1password.log
          retention-days: 90

  # =====================================
  # üõ°Ô∏è Êó•Ê¨°: „Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„ÇπÁõ£Êüª
  # =====================================

  compliance-audit:
    name: üõ°Ô∏è Compliance Audit
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 0 * * *' ||
      github.event.inputs.task_type == 'all' ||
      github.event.inputs.task_type == 'compliance-only'
    timeout-minutes: 20
    strategy:
      matrix:
        regulation:
          - { name: 'GDPR', severity: 'error' }
          - { name: 'SOC2', severity: 'error' }
          - { name: 'WCAG', severity: 'error' }
          - { name: 'Data-Retention', severity: 'warn' }
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üõ°Ô∏è Run ${{ matrix.regulation.name }} audit
        run: |
          echo "Running ${{ matrix.regulation.name }} compliance audit..."
          # ÂÆüË£Ö‰∫àÂÆö: „Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà
          # npm run compliance:${{ matrix.regulation.name }}
        continue-on-error: ${{ matrix.regulation.severity == 'warn' }}

      - name: üìä Upload compliance results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-${{ matrix.regulation.name }}-${{ github.run_number }}
          path: |
            compliance-*.json
          retention-days: 90

  # =====================================
  # üìä ÈÄ±Ê¨°: ÂìÅË≥™„É¨„Éù„Éº„Éà
  # =====================================

  weekly-quality-report:
    name: üìä Weekly Quality Report
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 0 * * 1' ||
      github.event.inputs.task_type == 'all' ||
      github.event.inputs.task_type == 'quality-only'
    timeout-minutes: 20
    permissions:
      contents: read
      issues: write
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Run quality analysis
        run: |
          echo "üìä ÂìÅË≥™ÂàÜÊûêÈñãÂßã..."
          npm run lint > eslint-report.txt 2>&1 || true
          npm run typecheck > typescript-report.txt 2>&1 || true
          npm run test:coverage > coverage-report.txt 2>&1 || true
          echo "ÂìÅË≥™ÂàÜÊûêÂÆå‰∫Ü"
        continue-on-error: true

      - name: üìä Generate quality report
        run: npm run quality:report
        continue-on-error: true

      - name: üí° Generate improvement suggestions
        run: npm run improvement:suggest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: üìã Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-${{ github.run_number }}
          path: |
            reports/quality/
            eslint-report.txt
            typescript-report.txt
            coverage-report.txt
          retention-days: 90

      - name: üìä Comment on tracking issue
        run: |
          LATEST_REPORT=$(ls -t reports/quality/quality-report-*.json | head -1)

          if [ -f "$LATEST_REPORT" ]; then
            SCORE=$(jq -r '.score' "$LATEST_REPORT")
            GRADE=$(jq -r '.grade' "$LATEST_REPORT")
            STATUS=$(jq -r '.status' "$LATEST_REPORT")
            ESLINT_ERRORS=$(jq -r '.codeQuality.eslint.errors' "$LATEST_REPORT" || echo "0")
            TS_ERRORS=$(jq -r '.codeQuality.typescript.errors' "$LATEST_REPORT" || echo "0")
            COVERAGE=$(jq -r '.testing.coverage.lines' "$LATEST_REPORT" || echo "0")
            TODO_COUNT=$(jq -r '.technicalDebt.todoCount' "$LATEST_REPORT" || echo "0")

            cat > quality-summary.md << EOF
          ## üìä ÈÄ±Ê¨°ÂìÅË≥™„É¨„Éù„Éº„Éà - $(date '+%YÂπ¥%mÊúà%dÊó•')

          ### üìà Á∑èÂêàË©ï‰æ°
          - **„Çπ„Ç≥„Ç¢**: ${SCORE}/100ÁÇπ
          - **„Ç∞„É¨„Éº„Éâ**: ${GRADE}
          - **Áä∂ÊÖã**: ${STATUS}

          ### üîç Ë©≥Á¥∞„É°„Éà„É™„ÇØ„Çπ
          - **ESLint„Ç®„É©„Éº**: ${ESLINT_ERRORS}‰ª∂
          - **TypeScript„Ç®„É©„Éº**: ${TS_ERRORS}‰ª∂
          - **„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏**: ${COVERAGE}%
          - **ÊäÄË°ìÁöÑË≤†ÂÇµ**: ${TODO_COUNT}ÂÄã„ÅÆTODO

          ### üîó Ë©≥Á¥∞
          [„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---
          *Ëá™ÂãïÁîüÊàê - ÊØéÈÄ±ÊúàÊõú 9:00 JST*
          EOF

            gh issue comment 388 --body-file quality-summary.md || echo "Issue comment failed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # =====================================
  # üì≤ ÈÄöÁü•ÈõÜÁ¥Ñ
  # =====================================

  send-notifications:
    name: üì≤ Send Notifications
    runs-on: ubuntu-latest
    needs: [security-audit, compliance-audit, weekly-quality-report]
    if: always()
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üì• Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: üìä Generate summary
        id: summary
        run: |
          echo "## üìÖ BoxLog Scheduled Tasks Summary" > summary.md
          echo "" >> summary.md
          echo "**ÂÆüË°åÊó•ÊôÇ**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> summary.md
          echo "" >> summary.md

          echo "### üìä ÂÆüË°åÁµêÊûú" >> summary.md
          echo "| Task | Status |" >> summary.md
          echo "|------|--------|" >> summary.md
          echo "| üîê Security Audit | ${{ needs.security-audit.result }} |" >> summary.md
          echo "| üõ°Ô∏è Compliance Audit | ${{ needs.compliance-audit.result }} |" >> summary.md
          echo "| üìä Quality Report | ${{ needs.weekly-quality-report.result }} |" >> summary.md
          echo "" >> summary.md

          if [[ "${{ needs.security-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.compliance-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.weekly-quality-report.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è **‰∏ÄÈÉ®„ÅÆ„Çø„Çπ„ÇØ„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü**" >> summary.md
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ **„Åô„Åπ„Å¶„ÅÆ„Çø„Çπ„ÇØ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü**" >> summary.md
          fi

          cat summary.md

      - name: üì≤ Send Slack notification
        if: env.SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="${{ steps.summary.outputs.status }}"
          EMOJI=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ö†Ô∏è")

          PAYLOAD=$(cat <<EOF
          {
            "text": "${EMOJI} BoxLog Scheduled Tasks",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${EMOJI} BoxLog Scheduled Tasks"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Security Audit:* ${{ needs.security-audit.result }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Compliance:* ${{ needs.compliance-audit.result }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Quality Report:* ${{ needs.weekly-quality-report.result }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ë©≥Á¥∞„ÇíË¶ã„Çã>"
                }
              }
            ]
          }
          EOF
          )

          curl -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            "$SLACK_WEBHOOK_URL" || echo "Slack notification failed"
        continue-on-error: true

      - name: üìä Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: scheduled-tasks-summary-${{ github.run_number }}
          path: summary.md
          retention-days: 30
