name: 🔍 Code Quality Check

on:
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**/*.{ts,tsx,js,jsx}'
      - '.eslint/**/*'
      - 'package.json'
      - 'package-lock.json'
  push:
    branches: [main, dev]
    paths:
      - 'src/**/*.{ts,tsx,js,jsx}'
      - '.eslint/**/*'

env:
  NODE_VERSION: '18'
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-format:
    name: 🎯 ESLint & Prettier Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup ESLint plugins
        run: npm run eslint:setup

      - name: 🗂️ Cache ESLint
        uses: actions/cache@v3
        with:
          path: .eslint/cache
          key: eslint-${{ runner.os }}-${{ hashFiles('src/**/*.{ts,tsx,js,jsx}') }}
          restore-keys: |
            eslint-${{ runner.os }}-

      - name: 🔍 Run ESLint (Development mode)
        if: github.event_name == 'pull_request'
        run: NODE_ENV=development npm run lint:cache
        continue-on-error: false

      - name: 🔍 Run ESLint (Production mode) 
        if: github.event_name == 'push'
        run: NODE_ENV=production npm run lint:cache
        continue-on-error: false

      - name: 🎨 Check Prettier formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}"

      - name: 📊 Generate ESLint report
        if: always()
        run: npm run lint:report
        continue-on-error: true

      - name: 📄 Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: .eslint/reports/lint-report.html
          retention-days: 30

  typecheck:
    name: 🔤 TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔤 Run TypeScript compiler
        run: npm run typecheck

  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm test -- --reporter=verbose

  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, typecheck, test]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup ESLint plugins
        run: npm run eslint:setup

      - name: 📊 Generate technical debt report
        run: npm run debt:analyze
        continue-on-error: true

      - name: 📄 Upload technical debt report
        uses: actions/upload-artifact@v4
        with:
          name: technical-debt-report
          path: reports/
          retention-days: 30
        if: always()

      - name: ✅ Check all jobs success
        run: |
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
            echo "❌ ESLint & Prettier check failed"
            exit 1
          fi
          if [[ "${{ needs.typecheck.result }}" != "success" ]]; then
            echo "❌ TypeScript check failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          echo "✅ All quality checks passed!"

  pr-comment:
    name: 💬 PR Quality Comment
    runs-on: ubuntu-latest
    needs: [lint-and-format, typecheck, test]
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup ESLint plugins
        run: npm run eslint:setup

      - name: 📊 Generate quality metrics
        id: quality-metrics
        run: |
          # ESLintエラー・警告数を取得
          LINT_OUTPUT=$(NODE_ENV=development npm run lint:cache 2>&1 | tail -10 || true)
          
          # TODOの状況
          TODO_OUTPUT=$(npm run todo:health 2>/dev/null || echo '{}')
          
          # 技術的負債スコア
          DEBT_OUTPUT=$(npm run debt:json 2>/dev/null || echo '{}')
          
          echo "lint_output<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "todo_output<<EOF" >> $GITHUB_OUTPUT
          echo "$TODO_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "debt_output<<EOF" >> $GITHUB_OUTPUT  
          echo "$DEBT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 💬 Comment PR with quality summary
        uses: actions/github-script@v7
        with:
          script: |
            const lintResult = "${{ needs.lint-and-format.result }}";
            const typecheckResult = "${{ needs.typecheck.result }}";
            const testResult = "${{ needs.test.result }}";
            
            // ステータス絵文字を決定
            const getStatusEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌'; 
                case 'cancelled': return '⏹️';
                default: return '⚠️';
              }
            };
            
            const comment = `## 🔍 Code Quality Report
            
            ### 📋 Check Results
            
            | Check | Status | Result |
            |-------|--------|--------|
            | ${getStatusEmoji(lintResult)} **ESLint & Prettier** | ${lintResult} | Code style and lint rules |
            | ${getStatusEmoji(typecheckResult)} **TypeScript** | ${typecheckResult} | Type checking |
            | ${getStatusEmoji(testResult)} **Tests** | ${testResult} | Unit tests execution |
            
            ### 📊 Quality Metrics
            
            - **Environment**: Development mode (PR)
            - **ESLint Config**: \`.eslint/index.js\`
            - **Cache**: Enabled for performance
            
            ${lintResult === 'failure' ? '⚠️ **Please fix ESLint errors before merging**' : ''}
            ${typecheckResult === 'failure' ? '⚠️ **Please fix TypeScript errors before merging**' : ''}
            ${testResult === 'failure' ? '⚠️ **Please fix failing tests before merging**' : ''}
            
            ### 🔗 Artifacts
            
            - 📄 [ESLint Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - 📊 [Technical Debt Analysis](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            
            ${lintResult === 'success' && typecheckResult === 'success' && testResult === 'success' 
              ? '🎉 **All quality checks passed! Ready to merge.**' 
              : '🔧 **Please address the issues above before merging.**'}
            
            <sub>Generated by BoxLog Code Quality Check</sub>`;
            
            // 既存のコメントを探す
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🔍 Code Quality Report')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }