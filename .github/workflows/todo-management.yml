name: 📋 TODO/FIXME Management

on:
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'src/**/*.js'
      - 'src/**/*.jsx'
  push:
    branches: [main, dev]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
  schedule:
    # 毎日AM 9:00 (UTC) に実行
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      generate_report:
        description: 'Generate detailed report'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  todo-structure-check:
    name: 🔍 TODO Structure Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup ESLint plugins
        run: npm run postinstall

      - name: 📋 Run TODO structure validation
        id: todo-lint
        run: |
          npm run todo:lint > todo-lint-output.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 📊 Upload TODO lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: todo-lint-results
          path: todo-lint-output.txt

      - name: 💬 Comment PR with TODO structure issues
        if: github.event_name == 'pull_request' && steps.todo-lint.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const lintOutput = fs.readFileSync('todo-lint-output.txt', 'utf8');
            
            const comment = `## 📋 TODO Structure Validation Results
            
            ⚠️ **TODO/FIXME structure issues found:**
            
            \`\`\`
            ${lintOutput}
            \`\`\`
            
            ### 📝 Required TODO Format
            
            Please use the structured format for all TODO/FIXME comments:
            
            \`\`\`typescript
            // TODO [ISSUE-123] (2024-12-31) @assignee: Detailed description
            // FIXME [BUG-456] (2024-11-30): Fix the authentication bug
            \`\`\`
            
            ### ✅ Benefits of Structured TODOs
            
            - **Trackable**: Linked to specific issues
            - **Prioritized**: Clear deadlines and assignees
            - **Manageable**: Automated reporting and monitoring
            - **Accountable**: Clear ownership
            
            ---
            🔗 [TODO Management Guide](https://github.com/${{ github.repository }}/blob/main/docs/TODO_MANAGEMENT.md)
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📋 TODO Structure Validation Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: ❌ Fail if TODO structure issues found
        if: steps.todo-lint.outputs.exit_code != '0'
        run: |
          echo "❌ TODO structure validation failed!"
          echo "Please fix the TODO/FIXME format issues before merging."
          exit 1

  todo-analysis:
    name: 📊 TODO Analysis & Reporting
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📋 Run TODO analysis
        id: todo-analysis
        run: |
          npm run todo:check > todo-analysis.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 📄 Generate detailed report
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          node scripts/todo-report-generator.js

      - name: 📊 Upload TODO analysis results
        uses: actions/upload-artifact@v4
        with:
          name: todo-analysis-results
          path: |
            todo-analysis.txt
            docs/TODO_REPORT.md
          retention-days: 30

      - name: 🚨 Check for overdue TODOs
        id: overdue-check
        run: |
          npm run todo:overdue > overdue-todos.txt 2>&1
          if [ -s overdue-todos.txt ]; then
            echo "has_overdue=true" >> $GITHUB_OUTPUT
          else
            echo "has_overdue=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔴 Alert on overdue TODOs
        if: steps.overdue-check.outputs.has_overdue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const overdueOutput = fs.readFileSync('overdue-todos.txt', 'utf8');
            
            // Create issue for overdue TODOs
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Overdue TODOs Found - ${new Date().toISOString().split('T')[0]}`,
              body: `## 🚨 Overdue TODO Alert
              
              The following TODOs have passed their deadlines and require immediate attention:
              
              \`\`\`
              ${overdueOutput}
              \`\`\`
              
              ### 🎯 Action Required
              
              Please review these overdue items and either:
              1. Complete the TODO task
              2. Update the deadline with a realistic timeframe
              3. Reassign to another team member
              4. Close if no longer relevant
              
              ### 📊 TODO Health
              
              To prevent future overdue TODOs:
              - Set realistic deadlines
              - Assign clear ownership
              - Regular review in sprint planning
              - Use TODO management commands: \`npm run todo:check\`
              `,
              labels: ['todo', 'overdue', 'technical-debt', 'urgent'],
              assignees: [] // Add default assignees here
            });

  todo-pr-review:
    name: 📝 TODO PR Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📋 Analyze PR TODOs
        run: |
          npm run todo:check --format json > pr-todos.json 2>/dev/null || echo "[]" > pr-todos.json

      - name: 📥 Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base-branch

      - name: 📦 Install base dependencies
        working-directory: base-branch
        run: npm ci

      - name: 📋 Analyze base TODOs
        working-directory: base-branch
        run: |
          npm run todo:check --format json > ../base-todos.json 2>/dev/null || echo "[]" > ../base-todos.json

      - name: 📊 Compare TODO changes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let prTodos = [];
            let baseTodos = [];
            
            try {
              const prData = JSON.parse(fs.readFileSync('pr-todos.json', 'utf8'));
              prTodos = prData.todos || [];
            } catch (e) {
              console.log('Failed to parse PR TODOs');
            }
            
            try {
              const baseData = JSON.parse(fs.readFileSync('base-todos.json', 'utf8'));
              baseTodos = baseData.todos || [];
            } catch (e) {
              console.log('Failed to parse base TODOs');
            }
            
            const newTodos = prTodos.filter(prTodo => 
              !baseTodos.find(baseTodo => 
                baseTodo.filePath === prTodo.filePath && 
                baseTodo.lineNumber === prTodo.lineNumber
              )
            );
            
            const removedTodos = baseTodos.filter(baseTodo => 
              !prTodos.find(prTodo => 
                prTodo.filePath === baseTodo.filePath && 
                baseTodo.lineNumber === prTodo.lineNumber
              )
            );
            
            let comment = `## 📋 TODO Changes in this PR
            
            `;
            
            if (newTodos.length === 0 && removedTodos.length === 0) {
              comment += `✅ **No TODO changes detected**
              
              Great! This PR doesn't introduce new technical debt.`;
            } else {
              if (newTodos.length > 0) {
                comment += `### ➕ New TODOs (${newTodos.length})
                
                `;
                
                newTodos.forEach(todo => {
                  const file = todo.filePath.replace(process.cwd() + '/', '');
                  const structured = todo.isStructured ? '✅' : '⚠️';
                  const priority = todo.priority ? `[${todo.priority}]` : '';
                  
                  comment += `- ${structured} **${todo.type}** ${priority} in \`${file}:${todo.lineNumber}\`
                    ${todo.description}
                
                `;
                });
              }
              
              if (removedTodos.length > 0) {
                comment += `### ➖ Resolved TODOs (${removedTodos.length})
                
                `;
                
                removedTodos.forEach(todo => {
                  const file = todo.filePath.replace(process.cwd() + '/', '');
                  comment += `- ✅ **${todo.type}** in \`${file}:${todo.lineNumber}\`
                    ${todo.description}
                
                `;
                });
                
                comment += `🎉 **Great job resolving these TODOs!**
                
                `;
              }
              
              // アドバイス
              const unstructuredNew = newTodos.filter(todo => !todo.isStructured);
              if (unstructuredNew.length > 0) {
                comment += `### ⚠️ Recommendation
                
                ${unstructuredNew.length} new TODO(s) are not structured. Please use the format:
                \`\`\`
                // TODO [ISSUE-123] (2024-12-31) @assignee: Description
                \`\`\`
                `;
              }
            }
            
            comment += `
            ---
            📊 **Current TODO Stats:**
            - Total: ${prTodos.length}
            - Structured: ${prTodos.filter(t => t.isStructured).length}
            - High Priority: ${prTodos.filter(t => ['P0', 'P1', 'CRITICAL', 'HIGH'].includes(t.priority)).length}
            
            💡 Use \`npm run todo:check\` to review all TODOs locally.
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📋 TODO Changes in this PR')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }