name: 🛡️ Security Audit

on:
  schedule:
    # 毎週月曜 9:00 JST に実行
    - cron: '0 0 * * 1'
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

# 同じブランチで複数実行された場合、古い実行をキャンセル
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =====================================
  # 🔍 npm audit - 依存関係の脆弱性チェック
  # =====================================
  npm-audit:
    name: 📦 npm Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit (Production)
        run: npm run security:check:production
        continue-on-error: true

      - name: 🔍 Run npm audit (All)
        run: npm run security:check
        continue-on-error: true

      - name: 📊 Generate audit report
        if: always()
        run: |
          npm audit --json > npm-audit-report.json || true
          echo "## 📦 npm Audit Report" >> $GITHUB_STEP_SUMMARY
          npm audit || echo "⚠️ Vulnerabilities found" >> $GITHUB_STEP_SUMMARY

      - name: 💾 Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: npm-audit-report.json
          retention-days: 30

  # =====================================
  # 🛡️ Security Full Check
  # =====================================
  security-full:
    name: 🛡️ Security Full Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [npm-audit]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run security full check
        run: npm run security:full
        continue-on-error: true

      - name: 📊 Summary
        if: always()
        run: |
          echo "## 🛡️ Security Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ TypeScript check completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Lint check completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ npm audit completed" >> $GITHUB_STEP_SUMMARY

  # =====================================
  # 🚪 Security Gate
  # =====================================
  security-gate:
    name: 🚪 Security Gate
    runs-on: ubuntu-latest
    needs: [npm-audit, security-full]
    if: always()

    steps:
      - name: ✅ Check results
        run: |
          if [[ "${{ needs.npm-audit.result }}" != "success" ]]; then
            echo "⚠️ npm audit found issues (not blocking)"
          fi
          if [[ "${{ needs.security-full.result }}" != "success" ]]; then
            echo "⚠️ Security full check found issues (not blocking)"
          fi
          echo "✅ Security audit completed!"

      - name: 💬 PR Summary Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const getEmoji = (result) => {
              if (result === 'success') return '✅';
              if (result === 'failure') return '❌';
              return '⚠️';
            };

            const comment = `## 🛡️ Security Audit Summary

            | Check | Status |
            |-------|--------|
            | ${getEmoji('${{ needs.npm-audit.result }}')} **npm Audit** | ${{ needs.npm-audit.result }} |
            | ${getEmoji('${{ needs.security-full.result }}')} **Security Full Check** | ${{ needs.security-full.result }} |

            ---

            ${(() => {
              const npmAudit = '${{ needs.npm-audit.result }}';
              const securityFull = '${{ needs.security-full.result }}';

              if (npmAudit === 'success' && securityFull === 'success') {
                return '🎉 **All security checks passed!**';
              } else {
                return '⚠️ **Please review security audit results.**';
              }
            })()}

            <sub>🤖 BoxLog Security Audit Pipeline</sub>`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c => c.body.includes('🛡️ Security Audit Summary'));

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
