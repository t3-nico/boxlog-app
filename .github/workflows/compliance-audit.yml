name: 🛡️ International Compliance Audit

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # 毎日午前9時（JST）に自動実行
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Audit Type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - gdpr-only
          - security-only
          - accessibility-only

jobs:
  compliance-audit:
    name: 📋 Compliance Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        regulation: [
          { name: 'GDPR', config: 'gdpr-required', severity: 'error' },
          { name: 'SOC2', config: 'soc2-security', severity: 'error' },
          { name: 'WCAG', config: 'accessibility', severity: 'error' },
          { name: 'Data-Retention', config: 'data-governance', severity: 'warn' }
        ]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: |
          npm ci --legacy-peer-deps
          
      - name: 🔗 Setup Compliance Plugin
        run: |
          mkdir -p node_modules/eslint-plugin-boxlog-compliance
          cp -r config/eslint/compliance-rules/* node_modules/eslint-plugin-boxlog-compliance/
          echo '{"name": "eslint-plugin-boxlog-compliance", "version": "1.0.0", "main": "index.js"}' > node_modules/eslint-plugin-boxlog-compliance/package.json

      - name: 🛡️ Run ${{ matrix.regulation.name }} Compliance Check
        id: compliance_check
        run: |
          echo "Running ${{ matrix.regulation.name }} compliance audit..."
          
          # 規制別のESLint実行
          npx eslint src/**/*.{ts,tsx} \
            --config config/eslint/.eslintrc.compliance.json \
            --format json \
            --output-file compliance-${{ matrix.regulation.name }}.json \
            --rule 'boxlog-compliance/*: ${{ matrix.regulation.severity }}' \
            || echo "violations_found=true" >> $GITHUB_OUTPUT
          
          # 結果の集計
          violations=$(cat compliance-${{ matrix.regulation.name }}.json | jq '[.[].messages | length] | add // 0')
          errors=$(cat compliance-${{ matrix.regulation.name }}.json | jq '[.[].messages[] | select(.severity == 2)] | length')
          warnings=$(cat compliance-${{ matrix.regulation.name }}.json | jq '[.[].messages[] | select(.severity == 1)] | length')
          
          echo "violations=$violations" >> $GITHUB_OUTPUT
          echo "errors=$errors" >> $GITHUB_OUTPUT
          echo "warnings=$warnings" >> $GITHUB_OUTPUT
          
          # コンプライアンススコア計算
          total_files=$(cat compliance-${{ matrix.regulation.name }}.json | jq 'length')
          affected_files=$(cat compliance-${{ matrix.regulation.name }}.json | jq '[.[] | select(.messages | length > 0)] | length')
          
          if [ "$total_files" -gt 0 ]; then
            score=$(echo "scale=2; 100 - (($errors * 10 + $warnings * 5) / $total_files)" | bc -l)
            score=${score%.*}  # 小数点以下切り捨て
            if [ "$score" -lt 0 ]; then score=0; fi
          else
            score=100
          fi
          
          echo "score=$score" >> $GITHUB_OUTPUT
          echo "affected_files=$affected_files" >> $GITHUB_OUTPUT
          echo "total_files=$total_files" >> $GITHUB_OUTPUT

      - name: 📊 Update Compliance Badge
        if: matrix.regulation.name == 'GDPR'
        run: |
          score=${{ steps.compliance_check.outputs.score }}
          if [ "$score" -ge 90 ]; then
            color="brightgreen"
            message="$score%25-compliant"
          elif [ "$score" -ge 70 ]; then
            color="yellow"
            message="$score%25-partial"
          else
            color="red"
            message="$score%25-non-compliant"
          fi
          
          echo "https://img.shields.io/badge/GDPR-$message-$color" > gdpr-badge-url.txt

      - name: 💬 Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const regulation = '${{ matrix.regulation.name }}';
            const score = ${{ steps.compliance_check.outputs.score }};
            const errors = ${{ steps.compliance_check.outputs.errors }};
            const warnings = ${{ steps.compliance_check.outputs.warnings }};
            const violations = ${{ steps.compliance_check.outputs.violations }};
            
            const getStatusEmoji = (score) => {
              if (score >= 90) return '✅';
              if (score >= 70) return '⚠️';
              return '❌';
            };
            
            const getComplianceStatus = (score) => {
              if (score >= 90) return 'COMPLIANT';
              if (score >= 70) return 'PARTIAL COMPLIANCE';
              return 'NON-COMPLIANT';
            };
            
            const comment = `
            ## ${getStatusEmoji(score)} ${regulation} Compliance Report
            
            **Status:** ${getComplianceStatus(score)} (${score}/100)
            
            | Metric | Count |
            |--------|-------|
            | Errors | ${errors} |
            | Warnings | ${warnings} |
            | Total Violations | ${violations} |
            
            ${score < 90 ? `
            ### 🔧 Action Required
            ${regulation} compliance issues detected. Please review and fix violations before merging.
            ` : `
            ### ✅ Compliance Verified
            All ${regulation} requirements are satisfied.
            `}
            `;
            
            // 既存のコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes(`${regulation} Compliance Report`)
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: 📤 Upload Compliance Results
        uses: actions/upload-artifact@v4
        with:
          name: compliance-results-${{ matrix.regulation.name }}
          path: compliance-${{ matrix.regulation.name }}.json
          retention-days: 30

      - name: 🚨 Fail on Critical Violations
        if: matrix.regulation.severity == 'error' && steps.compliance_check.outputs.errors > 0
        run: |
          echo "❌ Critical ${{ matrix.regulation.name }} violations detected!"
          echo "Errors: ${{ steps.compliance_check.outputs.errors }}"
          echo "Warnings: ${{ steps.compliance_check.outputs.warnings }}"
          exit 1

  generate-comprehensive-report:
    name: 📊 Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: compliance-audit
    if: always()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Install Dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔗 Setup Compliance Plugin
        run: |
          mkdir -p node_modules/eslint-plugin-boxlog-compliance
          cp -r config/eslint/compliance-rules/* node_modules/eslint-plugin-boxlog-compliance/
          echo '{"name": "eslint-plugin-boxlog-compliance", "version": "1.0.0", "main": "index.js"}' > node_modules/eslint-plugin-boxlog-compliance/package.json

      - name: 📥 Download All Results
        uses: actions/download-artifact@v4
        with:
          path: ./compliance-results/

      - name: 📋 Generate Comprehensive Report
        run: |
          chmod +x scripts/compliance-report.js
          node scripts/compliance-report.js

      - name: 📤 Upload Comprehensive Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-compliance-report
          path: compliance-reports/
          retention-days: 90

      - name: 📱 Notify Slack
        if: env.SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Slack通知はreport scriptで自動実行される
          echo "Slack notification sent via compliance-report.js"

      - name: 💾 Archive Audit Logs
        run: |
          # 監査ログの永続化（S3やArchiverサービス使用）
          mkdir -p audit-archive
          cp -r compliance-reports/* audit-archive/
          echo "Audit logs archived for compliance record keeping"

  security-scan:
    name: 🔒 Additional Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  audit-schedule:
    name: 📅 Schedule Next Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 Generate Scheduled Audit Report
        run: |
          echo "Scheduled compliance audit completed on $(date)"
          echo "Next audit: $(date -d '+1 day')"
          
          # 外部監査システムへの報告
          if [ "${{ secrets.AUDIT_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.AUDIT_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"type": "scheduled_audit", "timestamp": "'$(date -Iseconds)'", "status": "completed"}'
          fi