name: üìä Weekly Security Report

on:
  schedule:
    # ÊØéÈÄ±ÊúàÊõúÊó• 0:00 UTCÔºàÊó•Êú¨ÊôÇÈñì 9:00Ôºâ
    - cron: '0 0 * * 1'
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ

env:
  NODE_VERSION: '18'

# „Çª„Ç≠„É•„É™„ÉÜ„Ç£: ÊúÄÂ∞èÊ®©Èôê„ÅÆÂéüÂâá
permissions:
  contents: read          # „Ç≥„Éº„ÉâË™≠„ÅøÂèñ„Çä
  issues: write           # ÈÄ±Ê¨°„É¨„Éù„Éº„Éà„ÇíIssueÂåñ
  pull-requests: read     # PRÈñ¢ÈÄ£ÊÉÖÂ†±„ÅÆÂèñÂæó

jobs:
  generate-report:
    name: üìä Generate Security Report
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8  # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Generate security report
        run: npm run security:report

      - name: üì§ Upload report artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3  # v4.3.1
        with:
          name: security-report-${{ github.run_number }}
          path: reports/security/*.md
          retention-days: 90

      - name: üìù Create Issue with Report Summary
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // „É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ
            const reportsDir = 'reports/security';
            const files = fs.readdirSync(reportsDir);
            const latestReport = files
              .filter(f => f.startsWith('security-report-'))
              .sort()
              .reverse()[0];

            if (!latestReport) {
              console.log('No report found');
              return;
            }

            const reportPath = path.join(reportsDir, latestReport);
            const reportContent = fs.readFileSync(reportPath, 'utf8');

            // „Çµ„Éû„É™„Éº„ÇíÊäΩÂá∫ÔºàÊúÄÂàù„ÅÆ1000ÊñáÂ≠ó + Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥Ôºâ
            const lines = reportContent.split('\n');
            const summaryLines = lines.slice(0, 40);
            const recommendationsIndex = lines.findIndex(l => l.includes('## 7. Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥'));
            const recommendations = recommendationsIndex > 0
              ? lines.slice(recommendationsIndex, recommendationsIndex + 20).join('\n')
              : '';

            // Issue„ÅÆ‰ΩúÊàêÔºàÊó¢Â≠ò„ÅÆweekly report„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„ÉóÔºâ
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,weekly-report',
              state: 'open',
            });

            const thisWeek = new Date().toISOString().split('T')[0];
            const existingThisWeek = existingIssues.find(
              issue => issue.title.includes(thisWeek)
            );

            if (existingThisWeek) {
              console.log('Weekly report issue already exists');
              return;
            }

            // Êñ∞Ë¶èIssue‰ΩúÊàê
            const reportBody = [
              '# üõ°Ô∏è Weekly Security Report',
              '',
              summaryLines.join('\n'),
              '',
              recommendations,
              '',
              '---',
              '',
              `**Full Report**: [Download Artifact](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              '',
              `**Next Report**: ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}`,
              '',
              '<sub>ü§ñ Automated weekly security report</sub>'
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üõ°Ô∏è Weekly Security Report - ${thisWeek}`,
              labels: ['security', 'weekly-report', 'documentation'],
              body: reportBody
            });

      - name: üí¨ Notify on Critical Issues
        if: failure()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            const errorBody = [
              '## üö® Security Report Generation Failed',
              '',
              `**Workflow Run**: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              '',
              `**Date**: ${new Date().toISOString()}`,
              '',
              '**Action Required**: Investigate why the security report generation failed.',
              '',
              '<sub>ü§ñ Automated security alert</sub>'
            ].join('\n');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Report Generation Failed',
              labels: ['security', 'bug', 'P0-critical'],
              body: errorBody
            });
