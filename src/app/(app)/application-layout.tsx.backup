'use client'

import React, { useState, useRef } from 'react'
import { Avatar } from '@/components/avatar'
import { ToastProvider } from '@/components/ui/toast'
import { ThemeProvider } from '@/contexts/theme-context'
import { useAuthContext } from '@/contexts/AuthContext'
import { useRouter } from 'next/navigation'
import { SimpleThemeToggle } from '@/components/ui/theme-toggle'
import { EagleSmartFolderList } from '@/components/box/eagle-smart-folder-list'
import { EagleFolderList } from '@/components/box/eagle-folder-list'
import { useBoxStore } from '@/lib/box-store'
import { useSidebarStore, sidebarSelectors } from '@/stores/sidebarStore'
import { useSidebarMenu } from '@/hooks/useSidebarMenu'
import { DynamicSidebarSection } from '@/components/sidebar/DynamicSidebarSection'
import { OptimizedSidebarSection } from '@/components/sidebar/OptimizedSidebarSection'
import { TagsList } from '@/components/tags/tags-list'
import { SmartFolderList } from '@/components/smart-folders/smart-folder-list'
import { useDevelopmentPerformanceMonitor } from '@/hooks/usePerformanceMonitor'
import { sidebarConfig } from '@/config/sidebarConfig'
import {
  Dropdown,
  DropdownButton,
  DropdownDivider,
  DropdownItem,
  DropdownLabel,
  DropdownMenu,
} from '@/components/dropdown'
import { Navbar, NavbarItem, NavbarSection, NavbarSpacer } from '@/components/navbar'
import {
  Sidebar,
  SidebarBody,
  SidebarFooter,
  SidebarHeader,
  SidebarHeading,
  SidebarItem,
  SidebarLabel,
  SidebarSection,
  SidebarSpacer,
} from '@/components/sidebar'
import { SidebarLayout } from '@/components/sidebar-layout'
import { getEvents, getReviews } from '@/data'
import {
  ArrowRightStartOnRectangleIcon,
  ChevronDownIcon,
  Cog8ToothIcon,
  LightBulbIcon,
  QuestionMarkCircleIcon,
  ShieldCheckIcon,
  SparklesIcon,
} from '@heroicons/react/16/solid'
import {
  CalendarIcon,
  CubeIcon,
  DocumentTextIcon,
  MagnifyingGlassIcon,
  PlusIcon,
  Cog6ToothIcon,
  UserIcon,
  AdjustmentsVerticalIcon,
  CreditCardIcon,
  LinkIcon,
  BellAlertIcon,
  ArrowDownTrayIcon,
  InformationCircleIcon,
  TagIcon,
  ClipboardDocumentListIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  TrashIcon,
  ClockIcon,
  TableCellsIcon,
  ChartBarIcon,
  Squares2X2Icon,
} from '@heroicons/react/20/solid'
import { usePathname } from 'next/navigation'

export function ApplicationLayout({
  events,
  reviews,
  children,
}: {
  events: Awaited<ReturnType<typeof getEvents>>
  reviews: Awaited<ReturnType<typeof getReviews>>
  children: React.ReactNode
}) {
  let pathname = usePathname()
  let inSettings = pathname.startsWith('/settings')
  let inReview = pathname.startsWith('/review')
  let [collapsed, setCollapsed] = useState(false)
  const [showNotifications, setShowNotifications] = useState(false)
  const { user, signOut } = useAuthContext()
  const router = useRouter()
  
  // SmartFolder and Tag filtering
  const { setSmartFolderFilter, setTagFilter, filters } = useBoxStore()
  
  const handleSelectSmartFolder = (folderId: string) => {
    setSmartFolderFilter(folderId)
  }

  const handleSelectTag = (tagId: string) => {
    const currentTags = filters.tags || []
    const newTags = currentTags.includes(tagId) 
      ? currentTags.filter(id => id !== tagId)
      : [...currentTags, tagId]
    setTagFilter(newTags)
  }

  const handleSignOut = async () => {
    try {
      await signOut()
      router.push('/auth/login')
    } catch (error) {
      console.error('Logout error:', error)
    }
  }

  return (
    <ThemeProvider>
      <SidebarLayout
        navbar={
          <Navbar>
            <div className="flex items-center space-x-4 ml-auto">
              <SimpleThemeToggle />
            </div>
          </Navbar>
        }
        sidebar={
          <Sidebar collapsed={collapsed}>
          <SidebarHeader className="flex-row items-center gap-2">
            {!collapsed && inSettings && (
              <SidebarItem href="/" indicator={false}>
                <ChevronLeftIcon />
                <SidebarLabel>Back to app</SidebarLabel>
              </SidebarItem>
            )}
            {!collapsed && !inSettings && (
              <Dropdown>
                  <DropdownButton as={SidebarItem} indicator={false}>
                    <Avatar src="/teams/catalyst.svg" />
                    <SidebarLabel>BoxLog</SidebarLabel>
                    <ChevronDownIcon />
                  </DropdownButton>
                  <DropdownMenu className="min-w-80 lg:min-w-64" anchor="bottom start">
                    <DropdownItem href="/settings">
                      <Cog8ToothIcon />
                      <DropdownLabel>Settings</DropdownLabel>
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem href="#">
                      <ShieldCheckIcon />
                      <DropdownLabel>Privacy policy</DropdownLabel>
                    </DropdownItem>
                    <DropdownItem href="#">
                      <LightBulbIcon />
                      <DropdownLabel>Share feedback</DropdownLabel>
                    </DropdownItem>
                    <DropdownItem href="#">
                      <QuestionMarkCircleIcon />
                      <DropdownLabel>Support</DropdownLabel>
                    </DropdownItem>
                    <DropdownItem href="#">
                      <SparklesIcon />
                      <DropdownLabel>Changelog</DropdownLabel>
                    </DropdownItem>
                    <DropdownDivider />
                    <DropdownItem onClick={handleSignOut}>
                      <ArrowRightStartOnRectangleIcon />
                      <DropdownLabel>Logout</DropdownLabel>
                    </DropdownItem>
                  </DropdownMenu>
                </Dropdown>
              </>
            )}
            {!inSettings && (
              <div className="flex items-center gap-2 ml-auto">
                <div className="relative">
                  <button
                    onClick={() => setShowNotifications(!showNotifications)}
                    className="p-2 text-gray-400 hover:text-gray-600 rounded-md hover:bg-gray-100"
                    aria-label="Notifications"
                  >
                    <BellAlertIcon className="h-5 w-5" />
                  </button>
                  
                  {showNotifications && (
                    <div className="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 z-50">
                      <div className="p-4">
                        <div className="flex items-center justify-between mb-4">
                          <h3 className="text-lg font-semibold text-gray-900">お知らせ</h3>
                          <button
                            onClick={() => setShowNotifications(false)}
                            className="text-gray-400 hover:text-gray-600"
                          >
                            <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                        
                        <div className="space-y-3 max-h-96 overflow-y-auto">
                          <div className="p-3 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-xs font-medium text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                                システム
                              </span>
                              <span className="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                                未読
                              </span>
                            </div>
                            <h4 className="font-medium text-gray-900 mb-1">システムメンテナンスのお知らせ</h4>
                            <p className="text-sm text-gray-700 mb-1">2025年7月12日（土）2:00-4:00にシステムメンテナンスを実施いたします。</p>
                            <p className="text-xs text-gray-500">2025-07-08</p>
                          </div>
                          
                          <div className="p-3 bg-gray-50 rounded-lg">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-xs font-medium text-green-600 bg-green-100 px-2 py-1 rounded-full">
                                新機能
                              </span>
                            </div>
                            <h4 className="font-medium text-gray-900 mb-1">新機能のご案内</h4>
                            <p className="text-sm text-gray-700 mb-1">新しいタグ機能が追加されました。より効率的な情報整理が可能になります。</p>
                            <p className="text-xs text-gray-500">2025-07-05</p>
                          </div>
                          
                          <div className="p-3 bg-gray-50 rounded-lg">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-xs font-medium text-red-600 bg-red-100 px-2 py-1 rounded-full">
                                重要
                              </span>
                            </div>
                            <h4 className="font-medium text-gray-900 mb-1">利用規約の更新</h4>
                            <p className="text-sm text-gray-700 mb-1">利用規約を更新いたしました。変更内容をご確認ください。</p>
                            <p className="text-xs text-gray-500">2025-07-01</p>
                          </div>
                        </div>
                        
                        <div className="mt-4 pt-3 border-t border-gray-200">
                          <a
                            href="/notifications"
                            className="block w-full text-center text-sm text-blue-600 hover:text-blue-800 font-medium"
                            onClick={() => setShowNotifications(false)}
                          >
                            すべてのお知らせを見る
                          </a>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                
                <NavbarItem
                  onClick={() => setCollapsed(!collapsed)}
                  aria-label={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
                >
                  {collapsed ? <ChevronRightIcon /> : <ChevronLeftIcon />}
                </NavbarItem>
              </div>
            )}
          </SidebarHeader>

          <SidebarBody>
            {!inSettings && (
              <>
                <SidebarSection>
                  <SidebarItem
                    href="/add"
                    current={pathname.startsWith('/add')}
                    indicator={false}
                  >
                    <PlusIcon />
                    <SidebarLabel>Add</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/search"
                    current={pathname.startsWith('/search')}
                    indicator={false}
                  >
                    <MagnifyingGlassIcon />
                    <SidebarLabel>Search</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <div className="h-4" />

                <SidebarSection>
                  <SidebarHeading>Views</SidebarHeading>
                  <SidebarItem href="/calendar" current={pathname === '/calendar'}>
                    <CalendarIcon />
                    <SidebarLabel>Calendar</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem href="/table" current={pathname.startsWith('/table')}>
                    <TableCellsIcon />
                    <SidebarLabel>Table</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem href="/board" current={pathname.startsWith('/board')}>
                    <Squares2X2Icon />
                    <SidebarLabel>Board</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem href="/stats" current={pathname.startsWith('/stats')}>
                    <ChartBarIcon />
                    <SidebarLabel>Stats</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                {!collapsed && (
                  <>
                    <div className="px-2 mt-8">
                      <SmartFolderList
                        collapsed={collapsed}
                        onSelectFolder={handleSelectSmartFolder}
                        selectedFolderId={filters.smartFolder || ''}
                      />
                    </div>

                    <div className="px-2 mt-8">
                      <TagsList
                        collapsed={collapsed}
                        onSelectTag={handleSelectTag}
                        selectedTagIds={filters.tags || []}
                      />
                    </div>
                  </>
                )}

              </>
            )}

            {inSettings && (
              <>
                <SidebarSection>
                  <SidebarHeading>General</SidebarHeading>
                  <SidebarItem
                    href="/settings/account"
                    current={pathname.startsWith('/settings/account')}
                    indicator={false}
                  >
                    <UserIcon />
                    <SidebarLabel>Account</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/settings/preferences"
                    current={pathname.startsWith('/settings/preferences')}
                    indicator={false}
                  >
                    <AdjustmentsVerticalIcon />
                    <SidebarLabel>Preferences</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/settings/notifications"
                    current={pathname.startsWith('/settings/notifications')}
                    indicator={false}
                  >
                    <BellAlertIcon />
                    <SidebarLabel>Notifications</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <SidebarSection className="mt-8">
                  <SidebarHeading>Customization</SidebarHeading>
                  <SidebarItem
                    href="/settings/tags"
                    current={pathname.startsWith('/settings/tags')}
                    indicator={false}
                  >
                    <TagIcon />
                    <SidebarLabel>Tags</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/settings/templates"
                    current={pathname.startsWith('/settings/templates')}
                    indicator={false}
                  >
                    <ClipboardDocumentListIcon />
                    <SidebarLabel>Task Templates</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <SidebarSection className="mt-8">
                  <SidebarHeading>Integration</SidebarHeading>
                  <SidebarItem
                    href="/settings/integration"
                    current={pathname.startsWith('/settings/integration')}
                    indicator={false}
                  >
                    <LinkIcon />
                    <SidebarLabel>Calendar & Integration</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <SidebarSection className="mt-8">
                  <SidebarHeading>Data</SidebarHeading>
                  <SidebarItem
                    href="/settings/plan-billing"
                    current={pathname.startsWith('/settings/plan-billing')}
                    indicator={false}
                  >
                    <CreditCardIcon />
                    <SidebarLabel>Plan & Billing</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/settings/data-export"
                    current={pathname.startsWith('/settings/data-export')}
                    indicator={false}
                  >
                    <ArrowDownTrayIcon />
                    <SidebarLabel>Data & Export</SidebarLabel>
                  </SidebarItem>
                  <SidebarItem
                    href="/settings/trash"
                    current={pathname.startsWith('/settings/trash')}
                    indicator={false}
                  >
                    <TrashIcon />
                    <SidebarLabel>Trash</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <SidebarSection className="mt-8">
                  <SidebarHeading>Personal</SidebarHeading>
                  <SidebarItem
                    href="/settings/chronotype"
                    current={pathname.startsWith('/settings/chronotype')}
                    indicator={false}
                  >
                    <ClockIcon />
                    <SidebarLabel>Chronotype</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>

                <SidebarSection className="mt-8">
                  <SidebarHeading>About</SidebarHeading>
                  <SidebarItem
                    href="/settings/legal"
                    current={pathname.startsWith('/settings/legal')}
                    indicator={false}
                  >
                    <InformationCircleIcon />
                    <SidebarLabel>About / Legal</SidebarLabel>
                  </SidebarItem>
                </SidebarSection>
              </>
            )}
            
            <SidebarSpacer />
          </SidebarBody>
          
          {/* ヘルプとアップグレードボタン */}
          {!inSettings && (
            <SidebarFooter>
              <DynamicSidebarSection
                section={sidebarConfig.find(section => section.id === 'support')!}
                currentPath={pathname}
                collapsed={collapsed}
              />
            </SidebarFooter>
          )}
          </Sidebar>
        }
        collapsed={collapsed}
      >
      <ToastProvider>
        {children}
      </ToastProvider>
    </SidebarLayout>
    </ThemeProvider>
  )
}
