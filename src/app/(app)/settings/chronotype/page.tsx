/* eslint-disable max-lines */
'use client'

import { useCallback, useState } from 'react'

import { Clock, GraduationCap, Lightbulb, Moon, Sun } from 'lucide-react'

import { SettingsLayout } from '@/features/settings/components'
import { useAutoSaveSettings } from '@/features/settings/hooks/useAutoSaveSettings'
import { useCalendarSettingsStore } from '@/features/settings/stores/useCalendarSettingsStore'
import { chronoTypeProfiles } from './chronotype-profiles'
import type { ChronotypeAutoSaveSettings } from './chronotype.types'


const typeColors = {
  focus: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
  creative: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
  rest: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
  admin: 'bg-neutral-100 text-neutral-600 dark:bg-neutral-800 dark:text-neutral-400',
  sleep: 'bg-neutral-200 text-neutral-500 dark:bg-neutral-700 dark:text-neutral-500',
}

const typeIcons = {
  focus: GraduationCap,
  creative: Lightbulb,
  rest: Moon,
  admin: Clock,
  sleep: () => <span className="text-base">üí§</span>,
}

interface DiagnosisQuestion {
  id: string
  question: string
  options: {
    value: number
    text: string
    type: 'lion' | 'bear' | 'wolf' | 'dolphin'
  }[]
}

const diagnosisQuestions: DiagnosisQuestion[] = [
  {
    id: '1',
    question: 'ÁêÜÊÉ≥ÁöÑ„Å™Â∞±ÂØùÊôÇÈñì„ÅØ„ÅÑ„Å§„Åß„Åô„ÅãÔºü',
    options: [
      { value: 4, text: '20:00-21:30ÔºàË∂ÖÊó©ÂØùÔºâ', type: 'lion' },
      { value: 3, text: '21:30-23:00ÔºàÊ®ôÊ∫ñÁöÑÔºâ', type: 'bear' },
      { value: 2, text: '23:00-01:00ÔºàÂ§úÂûãÔºâ', type: 'wolf' },
      { value: 1, text: '‰∏çË¶èÂâá„Éª„Åæ„Å°„Åæ„Å°', type: 'dolphin' },
    ],
  },
  {
    id: '2',
    question: 'ÁêÜÊÉ≥ÁöÑ„Å™Ëµ∑Â∫äÊôÇÈñì„ÅØ„ÅÑ„Å§„Åß„Åô„ÅãÔºü',
    options: [
      { value: 4, text: '5:00-6:30ÔºàË∂ÖÊó©Ëµ∑„ÅçÔºâ', type: 'lion' },
      { value: 3, text: '6:30-8:00ÔºàÊ®ôÊ∫ñÁöÑÔºâ', type: 'bear' },
      { value: 2, text: '8:00-10:00ÔºàÈÅÖ„ÇÅÔºâ', type: 'wolf' },
      { value: 1, text: '‰∏çË¶èÂâá„Éª„Åæ„Å°„Åæ„Å°', type: 'dolphin' },
    ],
  },
  {
    id: '3',
    question: 'ÊúÄ„ÇÇÈõÜ‰∏≠„Åß„Åç„ÇãÊôÇÈñìÂ∏Ø„ÅØ„ÅÑ„Å§„Åß„Åô„ÅãÔºü',
    options: [
      { value: 4, text: 'Êó©ÊúùÔºà6-9ÊôÇÔºâ', type: 'lion' },
      { value: 3, text: 'ÂçàÂâç‰∏≠Ôºà9-12ÊôÇÔºâ', type: 'bear' },
      { value: 2, text: 'Â§úÈñìÔºà20-24ÊôÇÔºâ', type: 'wolf' },
      { value: 1, text: 'Ë§áÊï∞„ÅÆÁü≠ÊôÇÈñìÔºà8-10ÊôÇ„ÄÅ14-16ÊôÇÔºâ', type: 'dolphin' },
    ],
  },
  {
    id: '4',
    question: 'Êúù„ÅÆÁõÆË¶ö„ÇÅ„ÅØ„Å©„ÅÜ„Åß„Åô„ÅãÔºü',
    options: [
      { value: 4, text: 'ÈùûÂ∏∏„Å´„Çπ„ÉÉ„Ç≠„É™„ÄÅ„Åô„ÅêÊ¥ªÂãïÈñãÂßã', type: 'lion' },
      { value: 3, text: '„Çπ„ÉÉ„Ç≠„É™ÁõÆË¶ö„ÇÅ„Çã', type: 'bear' },
      { value: 2, text: '„Å™„Åã„Å™„ÅãËµ∑„Åç„Çâ„Çå„Å™„ÅÑ', type: 'wolf' },
      { value: 1, text: 'ÊµÖ„ÅÑÁú†„Çä„ÄÅÈ†ªÁπÅ„Å´ÁõÆË¶ö„ÇÅ„Çã', type: 'dolphin' },
    ],
  },
  {
    id: '5',
    question: 'Â§ú„ÅÆÈÅé„Åî„ÅóÊñπ„Å®„Åó„Å¶Â•Ω„Åæ„Åó„ÅÑ„ÅÆ„ÅØÔºü',
    options: [
      { value: 1, text: '19-20ÊôÇÈ†É„Å´„ÅØ„É™„É©„ÉÉ„ÇØ„Çπ„É¢„Éº„Éâ', type: 'lion' },
      { value: 2, text: '21-22ÊôÇÈ†É„Å´ÈÅ©Â∫¶„Å´„Åè„Å§„Çç„Åê', type: 'bear' },
      { value: 4, text: 'Ê∑±Â§ú„Åæ„ÅßÊ¥ªÁô∫„Å´Ê¥ªÂãï„Åô„Çã', type: 'wolf' },
      { value: 3, text: 'Ê∞óÂàÜ„ÇÑ‰ΩìË™ø„Å´„Çà„Çã', type: 'dolphin' },
    ],
  },
  {
    id: '6',
    question: 'Áù°Áú†„ÅÆË≥™„Å´„Å§„ÅÑ„Å¶Êïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ',
    options: [
      { value: 3, text: 'Ë¶èÂâáÊ≠£„Åó„ÅèÊ∑±„ÅèÁú†„Çå„Çã', type: 'lion' },
      { value: 4, text: 'ÂÆâÂÆö„Åó„Å¶ËâØ„ÅèÁú†„Çå„Çã', type: 'bear' },
      { value: 2, text: 'ÈÅÖÂØù„Å†„ÅåÊ∑±„ÅèÁú†„Çå„Çã', type: 'wolf' },
      { value: 1, text: 'ÊµÖ„ÅÑÁú†„Çä„ÄÅ‰∏≠ÈÄîË¶öÈÜí„ÅåÂ§ö„ÅÑ', type: 'dolphin' },
    ],
  },
  {
    id: '7',
    question: 'ÈÄ±Êú´„ÅÆËá™ÁÑ∂„Å™Áù°Áú†„Éë„Çø„Éº„É≥„ÅØÔºü',
    options: [
      { value: 4, text: 'Âπ≥Êó•„Å®„Åæ„Å£„Åü„ÅèÂêå„Åò', type: 'lion' },
      { value: 3, text: 'Âπ≥Êó•„Å®„Åª„ÅºÂêå„ÅòÔºà¬±1ÊôÇÈñìÔºâ', type: 'bear' },
      { value: 2, text: 'Â§ßÂπÖ„Å´„Åö„Çå„ÇãÔºà2-3ÊôÇÈñì‰ª•‰∏äÔºâ', type: 'wolf' },
      { value: 1, text: '‰∏çË¶èÂâá„Åß‰∏ÄÂÆö„Åó„Å™„ÅÑ', type: 'dolphin' },
    ],
  },
]

const ChronoTypePage = () => {
  const { chronotype, updateSettings } = useCalendarSettingsStore()
  const [_customSchedules, _setCustomSchedules] = useState<ChronoTypeSchedule[]>([])
  const [showDiagnosis, setShowDiagnosis] = useState(false)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, number>>({})
  const [diagnosisResult, setDiagnosisResult] = useState<string | null>(null)

  // „ÇØ„É≠„Éé„Çø„Ç§„ÉóË®≠ÂÆö„ÅÆËá™Âãï‰øùÂ≠ò
  const chronoSettings = useAutoSaveSettings<ChronotypeAutoSaveSettings>({
    initialValues: {
      type: chronotype.type || 'bear',
      enabled: chronotype.enabled,
      displayMode: chronotype.displayMode || 'border',
      opacity: chronotype.opacity || 90,
    },
    onSave: async (values) => {
      // „ÇØ„É≠„Éé„Çø„Ç§„ÉóË®≠ÂÆöAPIÂëº„Å≥Âá∫„Åó„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
      await new Promise((resolve) => setTimeout(resolve, 600))
      // ÂÆüÈöõ„ÅÆstoreÊõ¥Êñ∞
      updateSettings({ chronotype: values })
    },
    successMessage: '„ÇØ„É≠„Éé„Çø„Ç§„ÉóË®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü',
    debounceMs: 1200,
  })

  const currentProfile = chronoTypeProfiles.find((p) => p.id === chronoSettings.values.type)

  // useCallback handlers for jsx-no-bind optimization
  const handleCloseDiagnosis = useCallback(() => {
    setShowDiagnosis(false)
  }, [])

  // Handler functions for diagnosis (reserved for future use)
  const resetDiagnosis = useCallback(() => {
    setShowDiagnosis(false)
    setCurrentQuestion(0)
    setAnswers({})
    setDiagnosisResult(null)
  }, [])

  const startDiagnosis = useCallback(() => {
    setShowDiagnosis(true)
    setCurrentQuestion(0)
    setAnswers({})
    setDiagnosisResult(null)

    // „Éö„Éº„Ç∏„Éà„ÉÉ„Éó„Å´„Çπ„É†„Éº„Ç∫„Çπ„ÇØ„É≠„Éº„É´
    setTimeout(() => {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      })
    }, 100)
  }, [])

  const calculateResult = useCallback((finalAnswers: Record<string, number>) => {
    const typeScores = { lion: 0, bear: 0, wolf: 0, dolphin: 0 }

    diagnosisQuestions.forEach((question) => {
      const answer = finalAnswers[question.id]
      if (answer) {
        const selectedOption = question.options.find((opt) => opt.value === answer)
        if (selectedOption) {
          typeScores[selectedOption.type]++
        }
      }
    })

    // ÊúÄÈ´ò„Çπ„Ç≥„Ç¢„ÅÆ„Çø„Ç§„Éó„ÇíÊ±∫ÂÆö
    const maxScore = Math.max(...Object.values(typeScores))
    const resultType = Object.entries(typeScores).find(([_, score]) => score === maxScore)?.[0] || 'bear'

    setDiagnosisResult(resultType)
    chronoSettings.updateValue('type', resultType as ChronotypeType)
  }, [chronoSettings])

  const handleAnswerSelect = useCallback((questionId: string, value: number) => {
    setAnswers((prev) => ({ ...prev, [questionId]: value }))

    if (currentQuestion < diagnosisQuestions.length - 1) {
      setTimeout(() => setCurrentQuestion((prev) => prev + 1), 300)
    } else {
      // Ë®∫Êñ≠ÂÆå‰∫Ü - ÁµêÊûú„ÇíË®àÁÆó
      setTimeout(() => calculateResult({ ...answers, [questionId]: value }), 300)
    }
  }, [currentQuestion, answers, calculateResult])

  // Handler for answer selection using data attributes
  const handleAnswerClick = useCallback(
    (event: React.MouseEvent<HTMLButtonElement>) => {
      const questionId = event.currentTarget.dataset.questionId
      const optionValue = Number(event.currentTarget.dataset.optionValue)
      if (questionId && !isNaN(optionValue)) {
        handleAnswerSelect(questionId, optionValue)
      }
    },
    [handleAnswerSelect]
  )

  // Handler for chronotype profile selection using data attributes
  const handleProfileSelect = useCallback(
    (event: React.MouseEvent<HTMLButtonElement>) => {
      const profileId = event.currentTarget.dataset.profileId
      if (profileId) {
        chronoSettings.updateValue('type', profileId as ChronotypeType)
      }
    },
    [chronoSettings]
  )

  const handleEnabledToggle = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      chronoSettings.updateValue('enabled', e.target.checked)
    },
    [chronoSettings]
  )

  const getTypeIcon = (type: ChronoTypeSchedule['type']) => {
    if (!Object.prototype.hasOwnProperty.call(typeIcons, type)) {
      return null
    }
    const IconComponent = typeIcons[type as keyof typeof typeIcons]
    return <IconComponent className="h-4 w-4" data-slot="icon" />
  }

  const progress = ((currentQuestion + 1) / diagnosisQuestions.length) * 100

  return (
    <SettingsLayout
      title="Chronotype Settings"
      description="„ÅÇ„Å™„Åü„ÅÆ‰ΩìÂÜÖÊôÇË®à„Å´Âêà„Çè„Åõ„Å¶ÊúÄÈÅ©„Å™‰ΩúÊ•≠„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíË®≠ÂÆö„Åó„Åæ„Åô"
    >
      <div className="space-y-6">
        {/* Ë®∫Êñ≠„Çª„ÇØ„Ç∑„Éß„É≥ */}
        {showDiagnosis ? (
          <div
            id="diagnosis-section"
            className="rounded-lg border border-neutral-200 bg-white p-6 dark:border-neutral-700 dark:bg-neutral-800"
          >
            {diagnosisResult ? (
              /* Ë®∫Êñ≠ÁµêÊûúË°®Á§∫ */
              <div className="text-center">
                <h2 className="mb-4 text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100">üéâ Ë®∫Êñ≠ÂÆå‰∫ÜÔºÅ</h2>
                <div className="mb-6">
                  <p className="mb-4 text-sm text-neutral-600 dark:text-neutral-400">„ÅÇ„Å™„Åü„ÅÆ„ÇØ„É≠„Éé„Çø„Ç§„Éó„ÅØ...</p>
                  <div
                    className="inline-block rounded-lg border border-blue-200 bg-blue-50 p-6 dark:border-blue-800 dark:bg-blue-950"
                  >
                    <div className="mb-2 flex items-center gap-3">
                      {diagnosisResult === 'lion' && (
                        <Sun className="h-8 w-8 text-yellow-600 dark:text-yellow-400" data-slot="icon" />
                      )}
                      {diagnosisResult === 'bear' && (
                        <Clock className="h-8 w-8 text-blue-600 dark:text-blue-400" data-slot="icon" />
                      )}
                      {diagnosisResult === 'wolf' && (
                        <Moon className="h-8 w-8 text-purple-600 dark:text-purple-400" data-slot="icon" />
                      )}
                      {diagnosisResult === 'dolphin' && (
                        <GraduationCap className="h-8 w-8 text-teal-600 dark:text-teal-400" data-slot="icon" />
                      )}
                      <h3 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                        {chronoTypeProfiles.find((p) => p.id === diagnosisResult)?.name}
                      </h3>
                    </div>
                    <p className="text-neutral-600 dark:text-neutral-400">
                      {chronoTypeProfiles.find((p) => p.id === diagnosisResult)?.description}
                    </p>
                  </div>
                </div>
                <div className="flex justify-center gap-3">
                  <button
                    type="button"
                    onClick={resetDiagnosis}
                    className="rounded-md border border-neutral-300 bg-white px-4 py-2 text-sm font-medium text-neutral-600 transition-colors hover:bg-neutral-100 dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-400 dark:hover:bg-neutral-700"
                  >
                    „ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë®∫Êñ≠
                  </button>
                  <button
                    type="button"
                    onClick={handleCloseDiagnosis}
                    className="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600"
                  >
                    Ë®≠ÂÆö„Å´ÈÄ≤„ÇÄ
                  </button>
                </div>
              </div>
            ) : (
              /* Ë≥™ÂïèË°®Á§∫ */
              <div>
                <div className="mb-6">
                  <div className="mb-2 flex items-center justify-between">
                    <h2 className="text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100">„ÇØ„É≠„Éé„Çø„Ç§„ÉóË®∫Êñ≠</h2>
                    <span className="text-sm text-neutral-500 dark:text-neutral-500">
                      {currentQuestion + 1} / {diagnosisQuestions.length}
                    </span>
                  </div>
                  <div className="h-2 w-full rounded-full bg-neutral-100 dark:bg-neutral-700">
                    <div
                      className="h-2 rounded-full bg-blue-600 transition-all duration-300 dark:bg-blue-500"
                      style={{ width: `${progress}%` }}
                    ></div>
                  </div>
                </div>

                <div className="mb-6">
                  <h3 className="mb-4 text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                    {(() => {
                      const question = currentQuestion >= 0 && currentQuestion < diagnosisQuestions.length ? diagnosisQuestions[currentQuestion] : null
                      return question?.question || ''
                    })()}
                  </h3>
                  <div className="space-y-3">
                    {(() => {
                      const question = currentQuestion >= 0 && currentQuestion < diagnosisQuestions.length ? diagnosisQuestions[currentQuestion] : null
                      return (question?.options || []).map((option) => (
                      <button
                        type="button"
                        key={option.value}
                        onClick={handleAnswerClick}
                        data-question-id={(() => {
                          const question = currentQuestion >= 0 && currentQuestion < diagnosisQuestions.length ? diagnosisQuestions[currentQuestion] : null
                          return question?.id || ''
                        })()}
                        data-option-value={option.value}
                        className="w-full rounded-lg border border-neutral-300 p-4 text-left transition-all hover:border-neutral-300 hover:bg-neutral-50 dark:border-neutral-600 dark:hover:border-neutral-600 dark:hover:bg-neutral-800"
                      >
                        {option.text}
                      </button>
                    ))
                    })()}
                  </div>
                </div>

                <button
                  type="button"
                  onClick={resetDiagnosis}
                  className="text-sm text-neutral-500 hover:text-neutral-900 dark:text-neutral-500 dark:hover:text-neutral-100"
                >
                  Ë®∫Êñ≠„Çí„Ç≠„É£„É≥„Çª„É´
                </button>
              </div>
            )}
          </div>
        ) : (
          /* „ÇØ„É≠„Éé„Çø„Ç§„Éó„Éó„É≠„Éï„Ç°„Ç§„É´ÈÅ∏Êäû */
          <div
            className="rounded-lg border border-neutral-200 bg-white p-6 dark:border-neutral-700 dark:bg-neutral-800"
          >
            <div className="mb-4 flex items-center justify-between">
              <h2 className="text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100">„ÇØ„É≠„Éé„Çø„Ç§„Éó„ÇíÈÅ∏Êäû</h2>
              <button
                type="button"
                onClick={startDiagnosis}
                className="rounded-lg bg-blue-600 px-3 py-1.5 text-sm font-medium text-white transition-colors hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600"
              >
                üîç Ë®∫Êñ≠„ÅßÊ±∫„ÇÅ„Çã
              </button>
            </div>

            <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
              {chronoTypeProfiles.map((profile) => (
                <button
                  type="button"
                  key={profile.id}
                  onClick={handleProfileSelect}
                  data-profile-id={profile.id}
                  className={`rounded-lg border-2 p-4 text-left transition-all ${
                    chronoSettings.values.type === profile.id
                      ? 'border-blue-500 bg-blue-50 dark:border-blue-400 dark:bg-blue-950'
                      : 'border-neutral-300 hover:border-neutral-400 dark:border-neutral-600 dark:hover:border-neutral-500'
                  }`}
                >
                  <div className="mb-2 flex items-center gap-2">
                    {profile.id === 'lion' && (
                      <Sun className="h-5 w-5 text-yellow-600 dark:text-yellow-400" data-slot="icon" />
                    )}
                    {profile.id === 'bear' && (
                      <Clock className="h-5 w-5 text-blue-600 dark:text-blue-400" data-slot="icon" />
                    )}
                    {profile.id === 'wolf' && <Moon className="h-5 w-5 text-purple-600 dark:text-purple-400" data-slot="icon" />}
                    {profile.id === 'dolphin' && (
                      <GraduationCap className="h-5 w-5 text-teal-600 dark:text-teal-400" data-slot="icon" />
                    )}
                    <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">{profile.name}</h3>
                  </div>
                  <p className="mb-2 text-sm text-neutral-600 dark:text-neutral-400">{profile.description}</p>
                  <div className="text-xs text-neutral-500 dark:text-neutral-500">
                    <div>„Éî„Éº„ÇØ: {profile.peakHours}</div>
                    <div>‰ΩéË™ø: {profile.lowHours}</div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}

        {/* ÈÅ∏Êäû„Åï„Çå„Åü„Éó„É≠„Éï„Ç°„Ç§„É´„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®Á§∫ */}
        {currentProfile != null && (
          <div
            className="rounded-lg border border-neutral-200 bg-white p-6 dark:border-neutral-700 dark:bg-neutral-800"
          >
            <h2 className="mb-4 text-xl font-bold text-neutral-900 dark:text-neutral-100">
              {currentProfile.name} „ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´
            </h2>

            <div className="space-y-3">
              {currentProfile.schedules.map((schedule) => (
                <div
                  key={schedule.id}
                  className={`flex items-center justify-between rounded-lg p-3 ${typeColors[schedule.type]}`}
                >
                  <div className="flex items-center gap-3">
                    {getTypeIcon(schedule.type)}
                    <div>
                      <div className="font-medium">{schedule.label}</div>
                      <div className="text-sm opacity-75">{schedule.description}</div>
                    </div>
                  </div>
                  <div className="font-mono text-sm">
                    {schedule.startTime} - {schedule.endTime}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* „Ç´„É¨„É≥„ÉÄ„ÉºË°®Á§∫Ë®≠ÂÆö */}
        <div className="rounded-lg border border-neutral-200 bg-white p-6 dark:border-neutral-700 dark:bg-neutral-800">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">Show in Calendar</h2>
              <p className="text-sm text-neutral-600 dark:text-neutral-400">
                Display chronotype indicators in calendar views
              </p>
            </div>
            <label className="relative inline-flex cursor-pointer items-center">
              <input
                type="checkbox"
                checked={chronoSettings.values.enabled}
                onChange={handleEnabledToggle}
                className="peer sr-only"
                aria-label="Show chronotype in calendar"
              />
              <div
                className={`peer h-6 w-12 rounded-full bg-neutral-200 after:absolute after:left-[2px] after:top-[2px] after:h-5 after:w-5 after:rounded-full after:border after:border-neutral-300 after:bg-white after:transition-all after:content-[''] focus:ring-blue-300 peer-checked:bg-blue-600 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 dark:bg-neutral-700 dark:after:border-neutral-600 dark:focus:ring-blue-800 dark:peer-checked:bg-blue-500`}
              ></div>
            </label>
          </div>
        </div>

        {/* „ÇØ„É≠„Éé„Çø„Ç§„ÉóË™¨Êòé„Çª„ÇØ„Ç∑„Éß„É≥ */}
        <div
          className="mt-8 rounded-lg border border-neutral-300 bg-white p-6 dark:border-neutral-600 dark:bg-neutral-800"
        >
          <h2 className="mb-4 text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100">„ÇØ„É≠„Éé„Çø„Ç§„Éó„Å®„ÅØÔºü</h2>

          <div className="prose prose-sm max-w-none">
            <div className="space-y-4 text-neutral-600 dark:text-neutral-400">
              <p>
                <strong>„ÇØ„É≠„Éé„Çø„Ç§„ÉóÔºàChronotypeÔºâ</strong>
                „ÅØ„ÄÅÂÄã‰∫∫„ÅÆ‰ΩìÂÜÖÊôÇË®àÔºàÊ¶ÇÊó•„É™„Ç∫„É†Ôºâ„Å´„Çà„Å£„Å¶Ê±∫„Åæ„ÇãÊ¥ªÂãï„Éë„Çø„Éº„É≥„ÅÆ„Åì„Å®„Åß„Åô„ÄÇ
                ‰∫∫„Åù„Çå„Åû„ÇåÁï∞„Å™„ÇãÁîüÁâ©Â≠¶ÁöÑ„Å™ÊôÇÈñìËª∏„ÇíÊåÅ„Å£„Å¶„Åä„Çä„ÄÅ„Åì„Çå„ÇíÁêÜËß£„Åó„Å¶Ê¥ªÁî®„Åô„Çã„Åì„Å®„ÅßÁîüÁî£ÊÄß„Å® well-being
                „ÇíÂêë‰∏ä„Åï„Åõ„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ
              </p>

              <h3 className="mb-6 text-lg font-bold text-neutral-900 dark:text-neutral-100">üìä 4„Å§„ÅÆ„ÇØ„É≠„Éé„Çø„Ç§„Éó</h3>

              <div className="my-6 grid grid-cols-1 gap-4 md:grid-cols-2">
                <div
                  className="rounded-lg border border-neutral-300 bg-yellow-50 p-4 dark:border-neutral-600 dark:bg-yellow-950"
                >
                  <h4 className="mb-2 font-semibold text-yellow-600 dark:text-yellow-400">
                    ü¶Å Lion („É©„Ç§„Ç™„É≥Âûã„ÉªË∂ÖÊúùÂûã)
                  </h4>
                  <ul className="space-y-1 text-sm text-yellow-600 dark:text-yellow-400">
                    <li>‚Ä¢ ‰∫∫Âè£„ÅÆÁ¥Ñ 15%</li>
                    <li>‚Ä¢ Êó©ÊúùÔºà5-7ÊôÇÔºâËµ∑Â∫ä„ÄÅ7-11ÊôÇ„Åå„Éî„Éº„ÇØ</li>
                    <li>‚Ä¢ Â§ú„ÅØ21ÊôÇÈ†É„Å´„ÅØÁñ≤„Çå„Çã</li>
                    <li>‚Ä¢ „É™„Éº„ÉÄ„Éº„Ç∑„ÉÉ„Éó„ÇíÁô∫ÊèÆ„Åó„ÇÑ„Åô„ÅÑ</li>
                  </ul>
                </div>

                <div
                  className="rounded-lg border border-neutral-300 bg-blue-50 p-4 dark:border-neutral-600 dark:bg-blue-950"
                >
                  <h4 className="mb-2 font-semibold text-blue-600 dark:text-blue-400">
                    üêª Bear („ÇØ„ÉûÂûã„ÉªÊ®ôÊ∫ñÂûã)
                  </h4>
                  <ul className="space-y-1 text-sm text-blue-600 dark:text-blue-400">
                    <li>‚Ä¢ ‰∫∫Âè£„ÅÆÁ¥Ñ 55%</li>
                    <li>‚Ä¢ 7-8ÊôÇËµ∑Â∫ä„ÄÅ9-12ÊôÇ„Å®14-17ÊôÇ„Åå„Éî„Éº„ÇØ</li>
                    <li>‚Ä¢ Â§™ÈôΩ„ÅÆ„Çµ„Ç§„ÇØ„É´„Å´ÂêåË™ø</li>
                    <li>‚Ä¢ ÊúÄ„ÇÇ‰∏ÄËà¨ÁöÑ„Å™„Çø„Ç§„Éó</li>
                  </ul>
                </div>

                <div
                  className="rounded-lg border border-neutral-300 bg-neutral-100 p-4 dark:border-neutral-600 dark:bg-neutral-700"
                >
                  <h4 className="mb-2 font-semibold text-neutral-900 dark:text-neutral-100">
                    üê∫ Wolf („Ç™„Ç™„Ç´„ÉüÂûã„ÉªÂ§úÂûã)
                  </h4>
                  <ul className="space-y-1 text-sm text-neutral-600 dark:text-neutral-400">
                    <li>‚Ä¢ ‰∫∫Âè£„ÅÆÁ¥Ñ 20%</li>
                    <li>‚Ä¢ 17-22ÊôÇ„Åå„Éî„Éº„ÇØ„ÄÅÊ∑±Â§ú„ÇÇÊ¥ªÂãïÁöÑ</li>
                    <li>‚Ä¢ Êúù„ÅØË™øÂ≠ê„Åå‰∏ä„Åå„Çä„Å´„Åè„ÅÑ</li>
                    <li>‚Ä¢ ÂâµÈÄ†ÊÄß„Å®Áõ¥ÊÑüÂäõ„ÅåÈ´ò„ÅÑ</li>
                  </ul>
                </div>

                <div
                  className="rounded-lg border border-neutral-300 bg-green-50 p-4 dark:border-neutral-600 dark:bg-green-950"
                >
                  <h4 className="mb-2 font-semibold text-green-600 dark:text-green-400">
                    üê¨ Dolphin („Ç§„É´„Ç´Âûã„Éª‰∏çË¶èÂâáÂûã)
                  </h4>
                  <ul className="space-y-1 text-sm text-green-600 dark:text-green-400">
                    <li>‚Ä¢ ‰∫∫Âè£„ÅÆÁ¥Ñ 10%</li>
                    <li>‚Ä¢ Ë§áÊï∞„ÅÆÁü≠„ÅÑ„Éî„Éº„ÇØÊôÇÈñì</li>
                    <li>‚Ä¢ Áù°Áú†„ÅåÊµÖ„Åè„ÄÅ‰∏≠ÈÄîË¶öÈÜí„ÅåÂ§ö„ÅÑ</li>
                    <li>‚Ä¢ È´ò„ÅÑÁü•ÊÄß„Å®ÂÆåÁíß‰∏ªÁæ©ÂÇæÂêë</li>
                  </ul>
                </div>
              </div>

              <h3 className="mb-6 text-lg font-bold text-neutral-900 dark:text-neutral-100">
                üéØ „ÇØ„É≠„Éé„Çø„Ç§„Éó„ÇíÊ¥ªÁî®„Åô„Çã„É°„É™„ÉÉ„Éà
              </h3>

              <ul className="ml-4 list-inside list-disc space-y-2 text-neutral-600 dark:text-neutral-400">
                <li>
                  <strong className="text-neutral-900 dark:text-neutral-100">ÁîüÁî£ÊÄß„ÅÆÂêë‰∏ä</strong>ÔºöËá™ÂàÜ„ÅÆ„Éî„Éº„ÇØÊôÇÈñì„Å´ÈáçË¶Å„Å™„Çø„Çπ„ÇØ„ÇíÈÖçÁΩÆ
                </li>
                <li>
                  <strong className="text-neutral-900 dark:text-neutral-100">„Çπ„Éà„É¨„ÇπËªΩÊ∏õ</strong>
                  Ôºö‰ΩìÂÜÖÊôÇË®à„Å´ÈÄÜ„Çâ„Çè„Å™„ÅÑÂÉç„ÅçÊñπ„Åß„Çπ„Éà„É¨„ÇπÊ∏õÂ∞ë
                </li>
                <li>
                  <strong className="text-neutral-900 dark:text-neutral-100">ÂâµÈÄ†ÊÄß„ÅÆÁô∫ÊèÆ</strong>Ôºö„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Å™ÊôÇÈñìÂ∏Ø„ÇíÊÑèË≠òÁöÑ„Å´Ê¥ªÁî®
                </li>
                <li>
                  <strong className="text-neutral-900 dark:text-neutral-100">ÂÅ•Â∫∑„ÅÆÁ∂≠ÊåÅ</strong>
                  ÔºöËá™ÁÑ∂„Å™„É™„Ç∫„É†„Å´Âêà„Çè„Åõ„ÅüÁîüÊ¥ª„ÅßÂøÉË∫´„ÅÆÂÅ•Â∫∑„Çí„Çµ„Éù„Éº„Éà
                </li>
                <li>
                  <strong className="text-neutral-900 dark:text-neutral-100">„ÉÅ„Éº„É†„ÉØ„Éº„ÇØ„ÅÆÊîπÂñÑ</strong>
                  Ôºö„É°„É≥„Éê„Éº„ÅÆ„ÇØ„É≠„Éé„Çø„Ç§„Éó„ÇíÁêÜËß£„Åó„ÅüÂçîÂÉç
                </li>
              </ul>

              <h3 className="mb-6 text-lg font-bold text-neutral-900 dark:text-neutral-100">üìù ‰ΩúÊ•≠„Çø„Ç§„Éó„ÅÆÂàÜÈ°û</h3>

              <div className="my-4 grid grid-cols-2 gap-3 md:grid-cols-5">
                <div
                  className="flex items-center gap-2 rounded-sm bg-green-50 p-2 dark:bg-green-950"
                >
                  <GraduationCap className="h-4 w-4 text-green-600 dark:text-green-400" data-slot="icon" />
                  <span className="text-sm font-semibold text-green-600 dark:text-green-400">
                    Focus
                  </span>
                </div>
                <div
                  className="flex items-center gap-2 rounded-sm bg-neutral-100 p-2 dark:bg-neutral-700"
                >
                  <Lightbulb className="h-4 w-4 text-neutral-900 dark:text-neutral-100" data-slot="icon" />
                  <span className="text-sm font-semibold text-neutral-900 dark:text-neutral-100">Creative</span>
                </div>
                <div
                  className="flex items-center gap-2 rounded-sm bg-blue-50 p-2 dark:bg-blue-950"
                >
                  <Moon className="h-4 w-4 text-blue-600 dark:text-blue-400" data-slot="icon" />
                  <span className="text-sm font-semibold text-blue-600 dark:text-blue-400">Rest</span>
                </div>
                <div className="flex items-center gap-2 rounded bg-neutral-100 p-2 dark:bg-neutral-700">
                  <Clock className="h-4 w-4 text-neutral-600 dark:text-neutral-400" data-slot="icon" />
                  <span className="text-sm font-semibold text-neutral-600 dark:text-neutral-400">Admin</span>
                </div>
                <div
                  className="flex items-center gap-2 rounded-sm bg-blue-50 p-2 dark:bg-blue-900/20"
                >
                  <span className="text-sm">üí§</span>
                  <span className="text-sm font-medium text-blue-600 dark:text-blue-400">Sleep</span>
                </div>
              </div>

              <p className="text-sm">
                <strong>Focus</strong>ÔºöÈõÜ‰∏≠Âäõ„ÇíË¶Å„Åô„ÇãÈáçË¶Å„Å™‰ΩúÊ•≠
                <br />
                <strong>Creative</strong>Ôºö„Ç¢„Ç§„Éá„Ç¢Âá∫„Åó„ÄÅ‰ºÅÁîª„ÄÅ„Éá„Ç∂„Ç§„É≥„Å™„Å©„ÅÆÂâµÈÄ†ÁöÑ‰ΩúÊ•≠
                <br />
                <strong>Rest</strong>Ôºö‰ºëÊÜ©„ÄÅËªΩ„ÅÑ‰ΩúÊ•≠„ÄÅ„É™„É©„ÉÉ„ÇØ„ÇπÊôÇÈñì
                <br />
                <strong>Admin</strong>Ôºö„É°„Éº„É´Âá¶ÁêÜ„ÄÅ‰∫ãÂãô‰ΩúÊ•≠„ÄÅ„É´„Éº„ÉÅ„É≥„Çø„Çπ„ÇØ
                <br />
                <strong>Sleep</strong>ÔºöÁù°Áú†ÊôÇÈñì„ÄÅ‰ºëÊÅØ„ÇíÊé®Â•®„Åô„ÇãÊôÇÈñìÂ∏Ø
              </p>

              <div className="mt-6 rounded-lg bg-neutral-100 p-4 dark:bg-neutral-700">
                <p className="text-sm text-neutral-600 dark:text-neutral-400">
                  üí° <strong>„Éí„É≥„Éà</strong>Ôºö„ÇØ„É≠„Éé„Çø„Ç§„Éó„ÅØÈÅ∫‰ºùÁöÑË¶ÅÂõ†„ÅåÂ§ß„Åç„Åè„ÄÅÂÆåÂÖ®„Å´Â§â„Åà„Çã„Åì„Å®„ÅØÂõ∞Èõ£„Åß„Åô„ÄÇ
                  ÈáçË¶Å„Å™„ÅÆ„ÅØËá™ÂàÜ„ÅÆ„Çø„Ç§„Éó„ÇíÂèó„ÅëÂÖ•„Çå„ÄÅ„Åù„Çå„Å´Âêà„Çè„Åõ„Å¶‰ΩúÊ•≠„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÊúÄÈÅ©Âåñ„Åô„Çã„Åì„Å®„Åß„Åô„ÄÇ
                </p>
              </div>

              {/* Ë®∫Êñ≠„Éú„Çø„É≥ */}
              <div className="mt-6 border-t border-neutral-200 pt-6 text-center dark:border-neutral-700">
                <p className="mb-4 text-sm text-neutral-600 dark:text-neutral-400">
                  Ëá™ÂàÜ„ÅÆ„ÇØ„É≠„Éé„Çø„Ç§„Éó„ÅåÂàÜ„Åã„Çâ„Å™„ÅÑÊñπ„ÅØ„ÄÅË®∫Êñ≠„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ
                </p>
                <button
                  type="button"
                  onClick={startDiagnosis}
                  className="inline-flex items-center gap-2 rounded-lg bg-blue-600 px-6 py-3 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600"
                >
                  üîç „ÇØ„É≠„Éé„Çø„Ç§„ÉóË®∫Êñ≠„ÇíÈñãÂßã
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </SettingsLayout>
  )
}

export default ChronoTypePage
