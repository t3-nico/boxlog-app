import { format, parse, parseISO, addMinutes, setHours, setMinutes } from 'date-fns';
import { getCurrentTimezone, getTimezoneOffset, utcToUserTimezone, userTimezoneToUtc } from './timezone';

// DB‰øùÂ≠òÁî®: „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥ ‚Üí UTCÔºàISOÊñáÂ≠óÂàó„ÅßËøî„ÅôÔºâ
export const localToUTC = (dateStr: string, timeStr: string): string => {
  // „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„ÅÆÊôÇÈñì„Å®„Åó„Å¶ÂÖ•Âäõ„Åï„Çå„ÅüÂÄ§„ÇíËß£Èáà
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  const localDate = new Date(dateTimeStr);
  
  // „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Åã„ÇâUTC„Å´Â§âÊèõ
  const utcDate = userTimezoneToUtc(localDate);
  
  console.log('üåê localToUTC conversion:', {
    input: { date: dateStr, time: timeStr },
    timezone: getCurrentTimezone(),
    localDate: localDate.toLocaleString(),
    utcDate: utcDate.toISOString()
  });
  
  return utcDate.toISOString();
};

// „Éï„Ç©„Éº„É†Ë°®Á§∫Áî®: UTC ‚Üí „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥
export const utcToLocal = (utcString: string): { date: string; time: string } => {
  const utcDate = new Date(utcString);
  
  // UTC„Åã„Çâ„É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Å´Â§âÊèõ
  const localDate = utcToUserTimezone(utcDate);
  
  console.log('üåê utcToLocal conversion:', {
    input: utcString,
    timezone: getCurrentTimezone(),
    utcDate: utcDate.toISOString(),
    localDate: localDate.toLocaleString()
  });
  
  return {
    date: format(localDate, 'yyyy-MM-dd'),
    time: format(localDate, 'HH:mm')
  };
};

// „Ç´„É¨„É≥„ÉÄ„ÉºË°®Á§∫Áî®: UTC ‚Üí „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„ÅøÊñáÂ≠óÂàó
export const formatEventTime = (utcString: string): string => {
  const utcDate = new Date(utcString);
  const localDate = utcToUserTimezone(utcDate);
  return format(localDate, 'MÊúàdÊó• HH:mm');
};

// ÊôÇÈñì„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
export const isValidTimeRange = (startTime: string, endTime: string): boolean => {
  const start = parse(startTime, 'HH:mm', new Date());
  const end = parse(endTime, 'HH:mm', new Date());
  return start < end;
};

// „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÁî®: YÂ∫ßÊ®ô„Åã„ÇâÊôÇÈñì„ÇíË®àÁÆó
export const calculateTimeFromY = (yPosition: number, hourHeight: number = 48): { hours: number; minutes: number } => {
  const totalMinutes = Math.round((yPosition / hourHeight) * 60);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  
  return { hours, minutes };
};

// „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÁî®: ÊôÇÈñì„Åã„ÇâYÂ∫ßÊ®ô„ÇíË®àÁÆó
export const calculateYFromTime = (hours: number, minutes: number, hourHeight: number = 48): number => {
  const totalMinutes = hours * 60 + minutes;
  return (totalMinutes / 60) * hourHeight;
};

// Date „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí„É≠„Éº„Ç´„É´ÊôÇÈñìÊñáÂ≠óÂàó„Å´Â§âÊèõ
export const dateToLocalStrings = (date: Date): { date: string; time: string } => {
  return {
    date: format(date, 'yyyy-MM-dd'),
    time: format(date, 'HH:mm')
  };
};

// „É≠„Éº„Ç´„É´ÊôÇÈñìÊñáÂ≠óÂàó„Çí Date „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ
export const localStringsToDate = (dateStr: string, timeStr: string): Date => {
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  return parse(dateTimeStr, "yyyy-MM-dd'T'HH:mm:ss", new Date());
};

// „Ç§„Éô„É≥„Éà„ÅÆÊúüÈñì„ÇíË®àÁÆóÔºàÂàÜÂçò‰ΩçÔºâ
export const calculateDuration = (startTime: string, endTime: string): number => {
  const start = parse(startTime, 'HH:mm', new Date());
  const end = parse(endTime, 'HH:mm', new Date());
  
  if (end <= start) {
    // ÁøåÊó•„Å∏„ÅÆË∑®„Çä
    const nextDayEnd = addMinutes(end, 24 * 60);
    return (nextDayEnd.getTime() - start.getTime()) / (1000 * 60);
  }
  
  return (end.getTime() - start.getTime()) / (1000 * 60);
};

// üî• BRUTAL: ÊñáÂ≠óÂàó„Åã„ÇâÊúÄÂ∞èÈôê„ÅÆDate‰ΩúÊàêÔºà„Çø„Ç§„É†„Çæ„Éº„É≥ÂÆâÂÖ®Ôºâ
export const createDateFromStrings = (dateStr: string, timeStr: string): Date => {
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  return parse(dateTimeStr, "yyyy-MM-dd'T'HH:mm:ss", new Date());
};

// „Éá„Éê„ÉÉ„Ç∞Áî®: ÊôÇÈñìÂ§âÊèõ„ÅÆÊ§úË®º
export const debugTimeConversion = (label: string, originalDate: Date, utcString?: string) => {
  console.log(`üïê ${label}:`, {
    original: originalDate,
    originalISO: originalDate.toISOString(),
    localFormat: format(originalDate, 'yyyy-MM-dd HH:mm'),
    utcString: utcString,
    timezone: TIMEZONE,
    offset: originalDate.getTimezoneOffset()
  });
};