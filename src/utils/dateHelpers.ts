import { format, parse, parseISO, addMinutes, setHours, setMinutes } from 'date-fns';
import { getCurrentTimezone, getTimezoneOffset, utcToUserTimezone, userTimezoneToUtc } from './timezone';

// DB‰øùÂ≠òÁî®: „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥ ‚Üí UTCÔºàISOÊñáÂ≠óÂàó„ÅßËøî„ÅôÔºâ
export const localToUTC = (dateStr: string, timeStr: string): string => {
  const timezone = getCurrentTimezone();
  
  console.log('üåê localToUTC - ÈñãÂßã:', {
    input: { date: dateStr, time: timeStr },
    userTimezone: timezone
  });
  
  // UTC„ÅÆÂ†¥ÂêàÔºöÂÖ•ÂäõÂÄ§„Çí„Åù„ÅÆ„Åæ„ÅæUTC„Å®„Åó„Å¶Êâ±„ÅÜ
  if (timezone === 'UTC') {
    const dateTimeStr = `${dateStr}T${timeStr}:00.000Z`;
    const utcDate = new Date(dateTimeStr);
    
    console.log('üåê localToUTC - UTCÁõ¥Êé•:', {
      input: `${dateStr}T${timeStr}:00`,
      output: utcDate.toISOString()
    });
    
    return utcDate.toISOString();
  }
  
  // „Åù„ÅÆ‰ªñ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥Ôºö„É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Åã„ÇâUTC„Å´Â§âÊèõ
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  
  // „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Åß„ÅÆÊôÇÂàª„Å®„Åó„Å¶Ëß£Èáà
  const userTimezoneDate = new Date(dateTimeStr);
  
  // „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Åã„ÇâUTC„Å´Â§âÊèõ
  const utcDate = userTimezoneToUtc(userTimezoneDate);
  
  console.log('üåê localToUTC - „Çø„Ç§„É†„Çæ„Éº„É≥Â§âÊèõ:', {
    input: { date: dateStr, time: timeStr },
    timezone: timezone,
    userTimezoneDate: userTimezoneDate.toLocaleString(),
    utcDate: utcDate.toISOString()
  });
  
  return utcDate.toISOString();
};

// „Éï„Ç©„Éº„É†Ë°®Á§∫Áî®: UTC ‚Üí „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥
export const utcToLocal = (utcString: string): { date: string; time: string } => {
  const timezone = getCurrentTimezone();
  const utcDate = new Date(utcString);
  
  console.log('üåê utcToLocal - ÈñãÂßã:', {
    input: utcString,
    userTimezone: timezone,
    utcDate: utcDate.toISOString()
  });
  
  // UTC„ÅÆÂ†¥ÂêàÔºöUTC„ÅÆ„Åæ„ÅæË°®Á§∫
  if (timezone === 'UTC') {
    const result = {
      date: format(utcDate, 'yyyy-MM-dd'),
      time: format(utcDate, 'HH:mm')
    };
    
    console.log('üåê utcToLocal - UTCÁõ¥Êé•:', {
      input: utcString,
      output: result
    });
    
    return result;
  }
  
  // „Åù„ÅÆ‰ªñ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥ÔºöUTC„Åã„Çâ„É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Å´Â§âÊèõ
  const localDate = utcToUserTimezone(utcDate);
  
  const result = {
    date: format(localDate, 'yyyy-MM-dd'),
    time: format(localDate, 'HH:mm')
  };
  
  console.log('üåê utcToLocal - „Çø„Ç§„É†„Çæ„Éº„É≥Â§âÊèõ:', {
    input: utcString,
    timezone: timezone,
    utcDate: utcDate.toISOString(),
    localDate: localDate.toLocaleString(),
    output: result
  });
  
  return result;
};

// „Ç´„É¨„É≥„ÉÄ„ÉºË°®Á§∫Áî®: UTC ‚Üí „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„ÅøÊñáÂ≠óÂàó
export const formatEventTime = (utcString: string): string => {
  const utcDate = new Date(utcString);
  const localDate = utcToUserTimezone(utcDate);
  return format(localDate, 'MÊúàdÊó• HH:mm');
};

// „Ç´„É¨„É≥„ÉÄ„Éº„Éâ„É©„ÉÉ„Ç∞Áî®: YÂ∫ßÊ®ô„Åã„ÇâÊôÇÂàª„ÇíË®àÁÆóÔºà„É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Éô„Éº„ÇπÔºâ
export const getTimeFromY = (
  yPosition: number, 
  baseDate: Date, 
  hourHeight: number = 48
): Date => {
  const timezone = getCurrentTimezone();
  
  // 24ÊôÇÈñìÂàÜ„ÅÆÈ´ò„Åï„ÅßÊ≠£Ë¶èÂåñ
  const totalMinutes = Math.round((yPosition / (hourHeight * 24)) * (24 * 60));
  
  // 15ÂàÜÂçò‰Ωç„Å´„Çπ„Éä„ÉÉ„Éó
  const snappedMinutes = Math.round(totalMinutes / 15) * 15;
  
  console.log('üåê getTimeFromY - „Éâ„É©„ÉÉ„Ç∞Ë®àÁÆó:', {
    yPosition,
    totalMinutes,
    snappedMinutes,
    timezone
  });
  
  // „É¶„Éº„Ç∂„Éº„Çø„Ç§„É†„Çæ„Éº„É≥„Åß„ÅÆÊó•‰ªò„Å®„Åó„Å¶‰ΩúÊàê
  if (timezone === 'UTC') {
    // UTCË®≠ÂÆö„ÅÆÂ†¥ÂêàÔºöUTCÊôÇÂàª„Å®„Åó„Å¶‰ΩúÊàê
    const utcDate = new Date(baseDate);
    utcDate.setUTCHours(0, 0, 0, 0);
    utcDate.setUTCMinutes(snappedMinutes);
    
    console.log('üåê getTimeFromY - UTCÁµêÊûú:', {
      baseDate: baseDate.toISOString(),
      result: utcDate.toISOString()
    });
    
    return utcDate;
  } else {
    // „Åù„ÅÆ‰ªñ„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥Ôºö„É≠„Éº„Ç´„É´ÊôÇÂàª„Å®„Åó„Å¶‰ΩúÊàê
    const localDate = new Date(baseDate);
    localDate.setHours(0, 0, 0, 0);
    localDate.setMinutes(snappedMinutes);
    
    console.log('üåê getTimeFromY - „É≠„Éº„Ç´„É´ÁµêÊûú:', {
      baseDate: baseDate.toISOString(),
      result: localDate.toISOString(),
      timezone
    });
    
    return localDate;
  }
};

// ÊôÇÈñì„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
export const isValidTimeRange = (startTime: string, endTime: string): boolean => {
  const start = parse(startTime, 'HH:mm', new Date());
  const end = parse(endTime, 'HH:mm', new Date());
  return start < end;
};

// „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÁî®: YÂ∫ßÊ®ô„Åã„ÇâÊôÇÈñì„ÇíË®àÁÆó
export const calculateTimeFromY = (yPosition: number, hourHeight: number = 48): { hours: number; minutes: number } => {
  const totalMinutes = Math.round((yPosition / hourHeight) * 60);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  
  return { hours, minutes };
};

// „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÁî®: ÊôÇÈñì„Åã„ÇâYÂ∫ßÊ®ô„ÇíË®àÁÆó
export const calculateYFromTime = (hours: number, minutes: number, hourHeight: number = 48): number => {
  const totalMinutes = hours * 60 + minutes;
  return (totalMinutes / 60) * hourHeight;
};

// Date „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí„É≠„Éº„Ç´„É´ÊôÇÈñìÊñáÂ≠óÂàó„Å´Â§âÊèõ
export const dateToLocalStrings = (date: Date): { date: string; time: string } => {
  return {
    date: format(date, 'yyyy-MM-dd'),
    time: format(date, 'HH:mm')
  };
};

// „É≠„Éº„Ç´„É´ÊôÇÈñìÊñáÂ≠óÂàó„Çí Date „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Â§âÊèõ
export const localStringsToDate = (dateStr: string, timeStr: string): Date => {
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  return parse(dateTimeStr, "yyyy-MM-dd'T'HH:mm:ss", new Date());
};

// „Ç§„Éô„É≥„Éà„ÅÆÊúüÈñì„ÇíË®àÁÆóÔºàÂàÜÂçò‰ΩçÔºâ
export const calculateDuration = (startTime: string, endTime: string): number => {
  const start = parse(startTime, 'HH:mm', new Date());
  const end = parse(endTime, 'HH:mm', new Date());
  
  if (end <= start) {
    // ÁøåÊó•„Å∏„ÅÆË∑®„Çä
    const nextDayEnd = addMinutes(end, 24 * 60);
    return (nextDayEnd.getTime() - start.getTime()) / (1000 * 60);
  }
  
  return (end.getTime() - start.getTime()) / (1000 * 60);
};

// üî• BRUTAL: ÊñáÂ≠óÂàó„Åã„ÇâÊúÄÂ∞èÈôê„ÅÆDate‰ΩúÊàêÔºà„Çø„Ç§„É†„Çæ„Éº„É≥ÂÆâÂÖ®Ôºâ
export const createDateFromStrings = (dateStr: string, timeStr: string): Date => {
  const dateTimeStr = `${dateStr}T${timeStr}:00`;
  return parse(dateTimeStr, "yyyy-MM-dd'T'HH:mm:ss", new Date());
};

// „Éá„Éê„ÉÉ„Ç∞Áî®: ÊôÇÈñìÂ§âÊèõ„ÅÆÊ§úË®º
export const debugTimeConversion = (label: string, originalDate: Date, utcString?: string) => {
  const timezone = getCurrentTimezone();
  console.log(`üïê ${label}:`, {
    original: originalDate,
    originalISO: originalDate.toISOString(),
    localFormat: format(originalDate, 'yyyy-MM-dd HH:mm'),
    utcString: utcString,
    timezone: timezone,
    offset: originalDate.getTimezoneOffset()
  });
};