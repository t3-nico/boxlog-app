#!/usr/bin/env node
/**
 * スマートnpmスクリプトランナー
 *
 * 環境に応じた柔軟なスクリプト実行を提供
 */

const { execSync } = require('child_process')
const fs = require('fs')

class SmartRunner {
  constructor() {
    this.fallbackMode = false
  }

  /**
   * スクリプト実行
   */
  async smartRun(scriptName, args = []) {
    console.log(`🚀 Smart running: ${scriptName}`)

    // .env.localの存在確認
    if (!fs.existsSync('.env.local')) {
      console.log('⚠️  .env.local not found. Creating template...')
      this.createFallbackEnv()
    }

    // スクリプト実行
    const fallbackScript = this.getFallbackScript(scriptName)
    const command = this.buildCommand(fallbackScript, args)

    try {
      const result = execSync(command, {
        stdio: 'inherit',
        env: { ...process.env, NODE_ENV: process.env.NODE_ENV || 'development' }
      })

      return result
    } catch (error) {
      console.error(`❌ Failed to execute: ${command}`)
      process.exit(1)
    }
  }

  /**
   * フォールバック環境ファイルの作成
   */
  createFallbackEnv() {
    const template = `# BoxLog Development Environment
# Auto-generated by smart-run
# Copy from .env.example and add your values

NODE_ENV=development

# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# PostgreSQL
DATABASE_URL=

# Sentry
SENTRY_DSN=
SENTRY_AUTH_TOKEN=

# Feature Flags
NEXT_PUBLIC_ENABLE_AI_CHAT=false
`

    fs.writeFileSync('.env.local', template)
    console.log('✅ Created .env.local template')
    console.log('📝 Please fill in your environment variables in .env.local')
  }

  /**
   * フォールバックスクリプトマッピング
   */
  getFallbackScript(scriptName) {
    const scriptMap = {
      'dev:secure': 'dev',
      'build:secure': 'build',
      'test:secure': 'test',
      'db:migrate:secure': 'db:migrate'
    }

    return scriptMap[scriptName] || scriptName
  }

  /**
   * コマンド構築
   */
  buildCommand(scriptName, args) {
    const argsString = args.join(' ')
    return `npm run ${scriptName} ${argsString}`.trim()
  }

  /**
   * ストリーミングが必要なコマンドかチェック
   */
  isStreamingCommand(scriptName) {
    const streamingCommands = ['dev', 'dev:secure', 'test:watch', 'storybook']
    return streamingCommands.includes(scriptName)
  }
}

// CLI実行
if (require.main === module) {
  const args = process.argv.slice(2)
  const scriptName = args[0]
  const scriptArgs = args.slice(1)

  if (!scriptName) {
    console.error('❌ Script name required')
    console.log(`
Usage: npm run smart <script-name> [args...]

Examples:
  npm run smart dev
  npm run smart build
  npm run smart test

Available scripts:
  - dev     : Start development server
  - build   : Build for production
  - test    : Run tests
`)
    process.exit(1)
  }

  const runner = new SmartRunner()
  runner.smartRun(scriptName, scriptArgs).catch(error => {
    console.error('❌ Execution failed:', error.message)
    process.exit(1)
  })
}

module.exports = SmartRunner
