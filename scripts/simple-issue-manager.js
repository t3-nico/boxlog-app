#!/usr/bin/env node

/**
 * Simple Issue Manager
 * ブランチを作らずにIssue管理のみを行うシンプルなスクリプト
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

const colors = {
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
}

const CONFIG_FILE = path.join(process.cwd(), '.claude', 'claude-config.json')
const SESSION_FILE = path.join(process.cwd(), '.claude-session.json')

function loadConfig() {
  try {
    return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'))
  } catch (error) {
    console.error(`${colors.red}❌ 設定ファイルが見つかりません: ${CONFIG_FILE}${colors.reset}`)
    process.exit(1)
  }
}

function saveSession(session) {
  fs.writeFileSync(SESSION_FILE, JSON.stringify(session, null, 2))
}

function loadSession() {
  try {
    return JSON.parse(fs.readFileSync(SESSION_FILE, 'utf8'))
  } catch (error) {
    return null
  }
}

function createIssue(title, priority = 'medium', size = 'medium', labels = []) {
  const config = loadConfig()

  // ラベルを構築
  const priorityLabel = config.labels.priorityMapping[priority] || 'P2-medium'
  const sizeLabel = config.labels.sizeMapping[size] || 'size-M'
  const allLabels = [...config.labels.default, priorityLabel, sizeLabel, 'ready', ...labels].join(',')

  const body = `## 🎯 作業内容
${title}

## 📋 タスク
- [ ] 要件分析・設計
- [ ] 実装
- [ ] テスト・検証
- [ ] ドキュメント更新

## 📝 進捗ログ
*進捗・重要な意思決定・変更点をここに記録*

---
**🤖 Generated by Simple Issue Manager**`

  try {
    console.log(`${colors.blue}📝 Issue作成中: ${colors.reset}${title}`)

    const result = execSync(`gh issue create --title "${title}" --body "${body}" --label "${allLabels}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })

    const issueUrl = result.trim()
    const issueNumber = issueUrl.split('/').pop()

    console.log(`${colors.green}✅ Issue #${issueNumber} 作成完了: ${colors.reset}${issueUrl}`)

    return {
      number: issueNumber,
      url: issueUrl,
      title: title,
      createdAt: new Date().toISOString(),
    }
  } catch (error) {
    console.error(`${colors.red}❌ Issue作成エラー: ${colors.reset}${error.message}`)
    return null
  }
}

function getCurrentBranch() {
  try {
    return execSync('git branch --show-current', { encoding: 'utf8' }).trim()
  } catch (error) {
    return 'unknown'
  }
}

function getLastCommit() {
  try {
    return execSync('git log -1 --pretty=format:"%h - %s"', { encoding: 'utf8' }).trim()
  } catch (error) {
    return 'No commits yet'
  }
}

function startSession(title, options = {}) {
  const _config = loadConfig()

  // 既存セッションをチェック
  const existingSession = loadSession()
  if (existingSession && !options.force) {
    console.log(
      `${colors.yellow}⚠️  進行中のセッションがあります: Issue #${existingSession.issueNumber}${colors.reset}`
    )
    console.log(`   タイトル: ${existingSession.title}`)
    console.log(`   開始時間: ${existingSession.startTime}`)
    console.log(`\n続行する場合は --force オプションを使用してください`)
    return
  }

  // 現在のブランチ情報を取得
  const currentBranch = getCurrentBranch()
  const lastCommit = getLastCommit()

  // Issue作成
  const issue = createIssue(title, options.priority, options.size, options.labels)
  if (!issue) {
    console.error(`${colors.red}❌ Issueの作成に失敗しました${colors.reset}`)
    return
  }

  // 初期ブランチ情報をIssueにコメント
  const branchInfoComment = `## 🌿 ブランチ情報

**開始ブランチ**: \`${currentBranch}\`  
**最新コミット**: \`${lastCommit}\`  
**開始時間**: ${new Date().toLocaleString('ja-JP')}

---
*Branch tracking by Simple Issue Manager*`

  try {
    execSync(`gh issue comment ${issue.number} --body "${branchInfoComment}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })
  } catch (error) {
    console.warn(`${colors.yellow}⚠️  ブランチ情報の記録に失敗しました${colors.reset}`)
  }

  // セッション情報保存
  const session = {
    issueNumber: issue.number,
    issueUrl: issue.url,
    title: title,
    startTime: new Date().toISOString(),
    currentBranch: currentBranch,
    startCommit: lastCommit,
  }

  saveSession(session)

  console.log(`\n${colors.green}✅ 作業セッション開始完了！${colors.reset}`)
  console.log(`   📋 Issue: #${issue.number}`)
  console.log(`   🌿 現在のブランチ: ${currentBranch}`)
  console.log(`   📝 最新コミット: ${lastCommit}`)

  console.log(`\n🔗 次のコマンド:`)
  console.log(`   進捗更新: npm run issue:progress "<進捗内容>"`)
  console.log(`   重要メモ: npm run issue:note "<重要な記録>"`)
  console.log(`   完了: npm run issue:complete`)

  console.log(`\n💡 コミット時の注意:`)
  console.log(`   Issue連携のため、コミットメッセージに #${issue.number} を含めてください`)
  console.log(`   例: git commit -m "feat: 新機能実装 #${issue.number}"`)
}

function updateProgress(message) {
  const session = loadSession()
  if (!session) {
    console.error(`${colors.red}❌ アクティブなセッションがありません${colors.reset}`)
    return
  }

  try {
    console.log(`${colors.blue}📝 進捗更新中: Issue #${session.issueNumber}${colors.reset}`)

    const currentBranch = getCurrentBranch()
    const lastCommit = getLastCommit()

    const progressComment = `## 📝 進捗更新 - ${new Date().toLocaleString('ja-JP')}

${message}

### 🌿 現在の状況
- **ブランチ**: \`${currentBranch}\`
- **最新コミット**: \`${lastCommit}\`

---
*Updated by Simple Issue Manager*`

    execSync(`gh issue comment ${session.issueNumber} --body "${progressComment}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })

    console.log(`${colors.green}✅ 進捗を更新しました${colors.reset}`)
    console.log(`   🌿 ブランチ: ${currentBranch}`)
    console.log(`   📝 最新コミット: ${lastCommit}`)
  } catch (error) {
    console.error(`${colors.red}❌ 進捗更新エラー: ${colors.reset}${error.message}`)
  }
}

function addNote(note) {
  const session = loadSession()
  if (!session) {
    console.error(`${colors.red}❌ アクティブなセッションがありません${colors.reset}`)
    return
  }

  try {
    console.log(`${colors.blue}📝 メモ追加中: Issue #${session.issueNumber}${colors.reset}`)

    const noteComment = `## 💡 重要メモ - ${new Date().toLocaleString('ja-JP')}

${note}

---
*Added by Simple Issue Manager*`

    execSync(`gh issue comment ${session.issueNumber} --body "${noteComment}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })

    console.log(`${colors.green}✅ メモを追加しました${colors.reset}`)
  } catch (error) {
    console.error(`${colors.red}❌ メモ追加エラー: ${colors.reset}${error.message}`)
  }
}

function completeSession() {
  const session = loadSession()
  if (!session) {
    console.error(`${colors.red}❌ アクティブなセッションがありません${colors.reset}`)
    return
  }

  try {
    const endTime = new Date().toISOString()
    const startTime = new Date(session.startTime)
    const duration = Math.floor((new Date(endTime) - startTime) / (1000 * 60)) // 分単位

    const currentBranch = getCurrentBranch()
    const lastCommit = getLastCommit()

    console.log(`${colors.blue}📝 セッション完了処理中...${colors.reset}`)

    const completionComment = `## ✅ 作業セッション完了 - ${new Date().toLocaleString('ja-JP')}

### 📊 作業サマリー
- **開始時間**: ${new Date(session.startTime).toLocaleString('ja-JP')}
- **終了時間**: ${new Date(endTime).toLocaleString('ja-JP')}
- **作業時間**: ${Math.floor(duration / 60)}時間${duration % 60}分

### 🌿 ブランチ・コミット情報
- **開始ブランチ**: \`${session.currentBranch || 'unknown'}\`
- **完了ブランチ**: \`${currentBranch}\`
- **開始コミット**: \`${session.startCommit || 'unknown'}\`
- **最終コミット**: \`${lastCommit}\`

### 🔗 次のアクション
- レビュー: \`gh issue view ${session.issueNumber}\`
- 新セッション: \`npm run issue:start "<次の作業>"\`

---
**🤖 Generated by Simple Issue Manager**`

    execSync(`gh issue comment ${session.issueNumber} --body "${completionComment}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })

    console.log(`${colors.green}✅ 作業セッション完了！${colors.reset}`)
    console.log(`   📋 Issue: #${session.issueNumber}`)
    console.log(`   ⏱️  作業時間: ${Math.floor(duration / 60)}時間${duration % 60}分`)
    console.log(`   🌿 ブランチ: ${session.currentBranch} → ${currentBranch}`)
    console.log(`   📝 完了レポート: Issue に詳細記録済み`)

    // セッションファイルを削除
    fs.unlinkSync(SESSION_FILE)

    console.log(`\n🔗 次のアクション:`)
    console.log(`   レビュー: gh issue view ${session.issueNumber}`)
    console.log(`   新セッション: npm run issue:start "<次の作業>"`)
  } catch (error) {
    console.error(`${colors.red}❌ セッション完了エラー: ${colors.reset}${error.message}`)
  }
}

function showStatus() {
  const session = loadSession()
  if (!session) {
    console.log(`${colors.gray}📋 アクティブなセッションはありません${colors.reset}`)
    return
  }

  const startTime = new Date(session.startTime)
  const duration = Math.floor((new Date() - startTime) / (1000 * 60))
  const currentBranch = getCurrentBranch()
  const lastCommit = getLastCommit()

  console.log(`${colors.bold}${colors.blue}📋 現在のセッション${colors.reset}`)
  console.log(`   Issue: #${session.issueNumber}`)
  console.log(`   タイトル: ${session.title}`)
  console.log(`   開始時間: ${startTime.toLocaleString('ja-JP')}`)
  console.log(`   経過時間: ${Math.floor(duration / 60)}時間${duration % 60}分`)
  console.log(`   URL: ${session.issueUrl}`)

  console.log(`\n${colors.bold}🌿 ブランチ情報${colors.reset}`)
  console.log(`   開始ブランチ: ${session.currentBranch || 'unknown'}`)
  console.log(`   現在ブランチ: ${currentBranch}`)
  console.log(`   開始コミット: ${session.startCommit || 'unknown'}`)
  console.log(`   最新コミット: ${lastCommit}`)
}

function showHelp() {
  console.log(`
${colors.bold}Simple Issue Manager${colors.reset}

${colors.bold}使用方法:${colors.reset}
  node scripts/simple-issue-manager.js <コマンド> [オプション]

${colors.bold}コマンド:${colors.reset}
  start <タイトル>     新しいIssueとセッションを開始
  progress <メッセージ> 進捗を更新
  note <メモ>         重要なメモを追加
  complete           セッションを完了
  status             現在のセッション状況を表示
  help               このヘルプを表示

${colors.bold}startコマンドのオプション:${colors.reset}
  --priority <level>  優先度 (urgent, high, medium, low)
  --size <size>      作業規模 (tiny, small, medium, large)
  --label <label>    追加ラベル (複数指定可能)
  --force           既存セッションを強制終了して開始

${colors.bold}例:${colors.reset}
  ${colors.gray}# 新しい作業を開始${colors.reset}
  node scripts/simple-issue-manager.js start "TODO統合管理システム完成"
  
  ${colors.gray}# 優先度とサイズを指定${colors.reset}
  node scripts/simple-issue-manager.js start "バグ修正" --priority high --size small
  
  ${colors.gray}# 進捗更新${colors.reset}
  node scripts/simple-issue-manager.js progress "基本機能の実装完了"
  
  ${colors.gray}# 作業完了${colors.reset}
  node scripts/simple-issue-manager.js complete

${colors.bold}特徴:${colors.reset}
  ✅ ブランチを作成せず、既存ブランチで作業
  ✅ Issue作成とコメント更新のみ
  ✅ シンプルで軽量
  ✅ GitHub CLI (gh) 必須
`)
}

// メイン実行
function main() {
  const args = process.argv.slice(2)

  if (args.length === 0) {
    showHelp()
    return
  }

  const command = args[0]
  const commandArgs = args.slice(1)

  switch (command) {
    case 'start': {
      if (commandArgs.length === 0) {
        console.error(`${colors.red}❌ タイトルを指定してください${colors.reset}`)
        return
      }

      const title = commandArgs[0]
      const options = {
        priority: 'medium',
        size: 'medium',
        labels: [],
        force: false,
      }

      for (let i = 1; i < commandArgs.length; i++) {
        switch (commandArgs[i]) {
          case '--priority':
            options.priority = commandArgs[++i]
            break
          case '--size':
            options.size = commandArgs[++i]
            break
          case '--label':
            options.labels.push(commandArgs[++i])
            break
          case '--force':
            options.force = true
            break
        }
      }

      startSession(title, options)
      break
    }

    case 'progress': {
      if (commandArgs.length === 0) {
        console.error(`${colors.red}❌ 進捗メッセージを指定してください${colors.reset}`)
        return
      }
      updateProgress(commandArgs[0])
      break
    }

    case 'note': {
      if (commandArgs.length === 0) {
        console.error(`${colors.red}❌ メモ内容を指定してください${colors.reset}`)
        return
      }
      addNote(commandArgs[0])
      break
    }

    case 'complete':
      completeSession()
      break

    case 'status':
      showStatus()
      break

    case 'help':
    case '--help':
    case '-h':
      showHelp()
      break

    default:
      console.error(`${colors.red}❌ 不明なコマンド: ${command}${colors.reset}`)
      showHelp()
  }
}

if (require.main === module) {
  main()
}

module.exports = {
  createIssue,
  startSession,
  updateProgress,
  addNote,
  completeSession,
  showStatus,
}
