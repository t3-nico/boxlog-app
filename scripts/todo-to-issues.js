#!/usr/bin/env node

/**
 * TODO → GitHub Issues 自動変換システム
 *
 * 既存のTODOコメントをGitHub Issueに自動変換し、
 * Issue番号とTODOコメントを紐付ける統合管理システム
 */

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// 既存のTODO管理システムをインポート
const { analyzeTodosInFile } = require('./todo-manager.js')

// 🎨 カラー出力
const colors = {
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
}

/**
 * TODOの優先度を分析して判定
 */
function analyzeTodoPriority(todo) {
  const text = todo.text.toLowerCase()
  const file = todo.file.toLowerCase()

  // P0: 緊急度が高いキーワード
  if (text.includes('urgent') || text.includes('critical') || text.includes('hotfix') || text.includes('緊急')) {
    return 'P0-urgent'
  }

  // P1: 高優先度（セキュリティ、パフォーマンス、破壊的変更）
  if (
    text.includes('security') ||
    text.includes('performance') ||
    text.includes('breaking') ||
    text.includes('セキュリティ') ||
    text.includes('パフォーマンス') ||
    text.includes('破壊的')
  ) {
    return 'P1-high'
  }

  // ファイルタイプによる優先度判定
  if (file.includes('eslint') || file.includes('config') || file.includes('script')) {
    return 'P2-medium'
  }

  return 'P3-low'
}

/**
 * TODOのサイズを見積もり
 */
function estimateTodoSize(todo) {
  const text = todo.text.toLowerCase()

  // size-XS: 簡単な修正・削除
  if (
    text.includes('remove') ||
    text.includes('delete') ||
    text.includes('fix typo') ||
    text.includes('削除') ||
    text.includes('修正')
  ) {
    return 'size-XS'
  }

  // size-L: 大規模実装
  if (
    text.includes('implement') ||
    text.includes('create') ||
    text.includes('build') ||
    text.includes('実装') ||
    text.includes('作成') ||
    text.includes('構築')
  ) {
    return 'size-L'
  }

  // size-S: 小規模修正・改善
  if (
    text.includes('improve') ||
    text.includes('optimize') ||
    text.includes('refactor') ||
    text.includes('改善') ||
    text.includes('最適化') ||
    text.includes('リファクタ')
  ) {
    return 'size-S'
  }

  return 'size-M' // デフォルト
}

/**
 * TODOのカテゴリを判定
 */
function categorizeTodo(todo) {
  const text = todo.text.toLowerCase()
  const file = todo.file.toLowerCase()

  const categories = []

  // 技術領域による分類
  if (file.includes('test') || text.includes('test')) categories.push('test')
  if (file.includes('doc') || text.includes('document')) categories.push('docs')
  if (file.includes('ui') || file.includes('component')) categories.push('ui', 'frontend')
  if (file.includes('api') || file.includes('server')) categories.push('api', 'backend')
  if (file.includes('security') || text.includes('security')) categories.push('security')
  if (file.includes('performance') || text.includes('performance')) categories.push('performance')
  if (file.includes('accessibility') || text.includes('a11y')) categories.push('accessibility')

  // デフォルト
  if (categories.length === 0) {
    if (file.includes('.tsx') || file.includes('.jsx')) categories.push('frontend')
    else if (file.includes('.js') || file.includes('.ts')) categories.push('refactor')
    else categories.push('feature')
  }

  return categories
}

/**
 * GitHub Issue本文を生成
 */
function generateIssueBody(todo, relatedTodos = []) {
  const priority = analyzeTodoPriority(todo)
  const size = estimateTodoSize(todo)
  const categories = categorizeTodo(todo)

  const body = `## 🎯 目標
${todo.text}

## 📍 対象ファイル
\`${todo.file}:${todo.line}\`

## 📋 実装内容
- [ ] ${todo.text}

## 🔗 関連情報
- **ファイル**: ${todo.file}
- **行**: ${todo.line}
- **タイプ**: ${todo.type}
- **優先度**: ${priority}
- **規模**: ${size}
- **カテゴリ**: ${categories.join(', ')}

${
  relatedTodos.length > 0
    ? `## 🔗 関連TODO
${relatedTodos.map((t) => `- \`${t.file}:${t.line}\` - ${t.text}`).join('\n')}`
    : ''
}

## ✅ 完了条件
- [ ] TODO コメントの削除または実装完了
- [ ] 関連テストの実行確認
- [ ] コードレビュー完了

---
*🤖 Generated by TODO Management System*`

  return body
}

/**
 * TODO用のIssueタイトルを生成
 */
function generateIssueTitle(todo) {
  // ファイル名から機能を推測
  const fileName = path.basename(todo.file, path.extname(todo.file))
  const dirName = path.basename(path.dirname(todo.file))

  // 短縮されたタイトルを生成
  let title = todo.text
  if (title.length > 60) {
    title = title.substring(0, 57) + '...'
  }

  // ファイル情報を追加
  const location = dirName !== '.' ? `${dirName}/${fileName}` : fileName

  return `TODO: ${title} (${location})`
}

/**
 * 関連TODOを検索
 */
function findRelatedTodos(targetTodo, allTodos) {
  const related = []
  const targetFile = targetTodo.file
  const targetDir = path.dirname(targetFile)

  for (const todo of allTodos) {
    if (todo === targetTodo) continue

    // 同じファイル内のTODO
    if (todo.file === targetFile) {
      related.push(todo)
      continue
    }

    // 同じディレクトリ内のTODO
    if (path.dirname(todo.file) === targetDir) {
      related.push(todo)
      continue
    }

    // キーワードが類似するTODO
    const targetWords = targetTodo.text.toLowerCase().split(' ')
    const todoWords = todo.text.toLowerCase().split(' ')
    const commonWords = targetWords.filter((word) => todoWords.includes(word) && word.length > 3)

    if (commonWords.length >= 2) {
      related.push(todo)
    }
  }

  return related.slice(0, 5) // 最大5個
}

/**
 * GitHub CLI でIssueを作成
 */
async function createGitHubIssue(todo, allTodos) {
  try {
    const title = generateIssueTitle(todo)
    const relatedTodos = findRelatedTodos(todo, allTodos)
    const body = generateIssueBody(todo, relatedTodos)
    const priority = analyzeTodoPriority(todo)
    const size = estimateTodoSize(todo)
    const categories = categorizeTodo(todo)

    // ラベルを構築
    const labels = [priority, size, ...categories, 'todo-generated'].join(',')

    console.log(`${colors.blue}📝 Issue作成中: ${colors.reset}${title}`)

    // GitHub CLI でIssue作成
    const result = execSync(`gh issue create --title "${title}" --body "${body}" --label "${labels}"`, {
      encoding: 'utf8',
      cwd: process.cwd(),
    })

    const issueUrl = result.trim()
    const issueNumber = issueUrl.split('/').pop()

    console.log(`${colors.green}✅ Issue #${issueNumber} 作成完了: ${colors.reset}${issueUrl}`)

    return {
      number: issueNumber,
      url: issueUrl,
      todo: todo,
    }
  } catch (error) {
    console.error(`${colors.red}❌ Issue作成エラー: ${colors.reset}${error.message}`)
    return null
  }
}

/**
 * TODOコメントにIssue番号を追加
 */
function linkTodoToIssue(todo, issueNumber) {
  try {
    const filePath = todo.file
    const content = fs.readFileSync(filePath, 'utf8')
    const lines = content.split('\n')

    // 該当行を探してIssue番号を追加
    if (lines[todo.line - 1]) {
      const originalLine = lines[todo.line - 1]

      // 既にIssue番号が含まれている場合はスキップ
      if (originalLine.includes('#') && /\#\d+/.test(originalLine)) {
        console.log(`${colors.yellow}⚠️  ${filePath}:${todo.line} は既にIssue番号が含まれています${colors.reset}`)
        return false
      }

      // Issue番号を追加
      const updatedLine = originalLine.replace(new RegExp(`(${todo.type})(.*)$`), `$1$2 #${issueNumber}`)

      lines[todo.line - 1] = updatedLine
      fs.writeFileSync(filePath, lines.join('\n'))

      console.log(`${colors.green}🔗 ${filePath}:${todo.line} にIssue #${issueNumber} をリンク${colors.reset}`)
      return true
    }
  } catch (error) {
    console.error(`${colors.red}❌ ファイル更新エラー: ${colors.reset}${error.message}`)
    return false
  }
}

/**
 * すべてのTODOをIssueに変換
 */
async function convertAllTodosToIssues(options = {}) {
  console.log(`${colors.bold}${colors.blue}🚀 TODO → Issues 自動変換開始${colors.reset}`)

  // TODO解析
  const allFiles = []
  const srcDir = path.join(process.cwd(), 'src')
  const scriptsDir = path.join(process.cwd(), 'scripts')
  const eslintDir = path.join(process.cwd(), '.eslint')

  function scanDirectory(dir) {
    if (!fs.existsSync(dir)) return

    const items = fs.readdirSync(dir)
    for (const item of items) {
      const fullPath = path.join(dir, item)
      const stat = fs.statSync(fullPath)

      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        scanDirectory(fullPath)
      } else if (stat.isFile() && /\.(js|ts|tsx|jsx)$/.test(item)) {
        allFiles.push(fullPath)
      }
    }
  }

  scanDirectory(srcDir)
  scanDirectory(scriptsDir)
  scanDirectory(eslintDir)

  // 全TODOを収集
  const allTodos = []
  for (const file of allFiles) {
    const todos = analyzeTodosInFile(file)
    allTodos.push(...todos)
  }

  console.log(`${colors.cyan}📊 ${allTodos.length}個のTODOを発見${colors.reset}`)

  if (allTodos.length === 0) {
    console.log(`${colors.yellow}ℹ️  変換対象のTODOがありません${colors.reset}`)
    return
  }

  // 優先度別に分類
  const byPriority = {}
  for (const todo of allTodos) {
    const priority = analyzeTodoPriority(todo)
    if (!byPriority[priority]) byPriority[priority] = []
    byPriority[priority].push(todo)
  }

  console.log(`${colors.bold}📋 優先度別分類:${colors.reset}`)
  for (const [priority, todos] of Object.entries(byPriority)) {
    console.log(`  ${priority}: ${todos.length}個`)
  }

  // 確認プロンプト
  if (!options.force) {
    console.log(
      `${colors.yellow}⚠️  ${allTodos.length}個のTODOをGitHub Issueに変換します。続行しますか？ (y/N)${colors.reset}`
    )
    // 実際の実装では readline を使用
    console.log(`${colors.gray}--force オプションで確認をスキップできます${colors.reset}`)
    if (!options.dryRun) {
      console.log(`${colors.yellow}⏹️  ドライランモードで実行中（実際のIssue作成は行いません）${colors.reset}`)
      return
    }
  }

  // Issues作成
  const createdIssues = []
  let successCount = 0
  let errorCount = 0

  // 優先度順で処理
  const priorityOrder = ['P0-urgent', 'P1-high', 'P2-medium', 'P3-low']

  for (const priority of priorityOrder) {
    if (!byPriority[priority]) continue

    console.log(`\n${colors.bold}🎯 ${priority} TODOを処理中...${colors.reset}`)

    for (const todo of byPriority[priority]) {
      if (options.dryRun) {
        console.log(`${colors.gray}[DRY-RUN] ${generateIssueTitle(todo)}${colors.reset}`)
        continue
      }

      const issue = await createGitHubIssue(todo, allTodos)
      if (issue) {
        createdIssues.push(issue)

        // TODOコメントにIssue番号をリンク
        if (options.linkTodos) {
          linkTodoToIssue(todo, issue.number)
        }

        successCount++
      } else {
        errorCount++
      }

      // API制限対策で少し待機
      await new Promise((resolve) => setTimeout(resolve, 500))
    }
  }

  // 結果サマリー
  console.log(`\n${colors.bold}${colors.green}✅ 変換完了${colors.reset}`)
  console.log(`${colors.green}成功: ${successCount}件${colors.reset}`)
  if (errorCount > 0) {
    console.log(`${colors.red}エラー: ${errorCount}件${colors.reset}`)
  }

  // 作成されたIssuesの概要レポート生成
  if (createdIssues.length > 0) {
    const reportPath = path.join(process.cwd(), '.eslint', 'reports', 'TODO_ISSUES_REPORT.md')
    generateIssuesReport(createdIssues, reportPath)
    console.log(`${colors.blue}📋 詳細レポート: ${reportPath}${colors.reset}`)
  }
}

/**
 * 作成されたIssuesのレポート生成
 */
function generateIssuesReport(issues, outputPath) {
  const report = `# 📋 TODO → Issues 変換レポート

## 📊 概要
- **作成日時**: ${new Date().toISOString()}
- **作成Issues数**: ${issues.length}

## 📝 作成されたIssues

${issues
  .map(
    (issue) => `### Issue #${issue.number}
- **タイトル**: ${generateIssueTitle(issue.todo)}
- **URL**: ${issue.url}
- **ファイル**: \`${issue.todo.file}:${issue.todo.line}\`
- **内容**: ${issue.todo.text}
- **優先度**: ${analyzeTodoPriority(issue.todo)}
- **規模**: ${estimateTodoSize(issue.todo)}

`
  )
  .join('\n')}

---
*🤖 Generated by TODO Management System*
`

  fs.writeFileSync(outputPath, report)
}

// コマンドライン引数処理
function parseArgs() {
  const args = process.argv.slice(2)
  const options = {
    force: false,
    dryRun: false,
    linkTodos: false,
    help: false,
  }

  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--force':
      case '-f':
        options.force = true
        break
      case '--dry-run':
      case '-d':
        options.dryRun = true
        break
      case '--link':
      case '-l':
        options.linkTodos = true
        break
      case '--help':
      case '-h':
        options.help = true
        break
    }
  }

  return options
}

function showHelp() {
  console.log(`
${colors.bold}TODO → GitHub Issues 自動変換システム${colors.reset}

${colors.bold}使用方法:${colors.reset}
  node scripts/todo-to-issues.js [オプション]

${colors.bold}オプション:${colors.reset}
  -f, --force     確認プロンプトをスキップ
  -d, --dry-run   実際のIssue作成を行わずに実行
  -l, --link      TODOコメントにIssue番号をリンク
  -h, --help      このヘルプを表示

${colors.bold}例:${colors.reset}
  ${colors.gray}# ドライランで確認${colors.reset}
  npm run todo:to-issues -- --dry-run
  
  ${colors.gray}# 実際にIssue作成（TODOにリンク追加）${colors.reset}
  npm run todo:to-issues -- --force --link

${colors.bold}前提条件:${colors.reset}
  - GitHub CLI (gh) がインストール済み
  - 認証済みのGitHubリポジトリ
`)
}

// メイン実行
async function main() {
  const options = parseArgs()

  if (options.help) {
    showHelp()
    return
  }

  try {
    await convertAllTodosToIssues(options)
  } catch (error) {
    console.error(`${colors.red}❌ エラー: ${error.message}${colors.reset}`)
    process.exit(1)
  }
}

// スクリプトとして実行された場合
if (require.main === module) {
  main()
}

module.exports = {
  convertAllTodosToIssues,
  analyzeTodoPriority,
  estimateTodoSize,
  categorizeTodo,
  generateIssueBody,
  generateIssueTitle,
}
